{
  "api/TeaPie.Application.html": {
    "href": "api/TeaPie.Application.html",
    "title": "Class Application | TeaPie",
    "summary": "Class Application Namespace TeaPie Assembly TeaPie.dll public sealed class Application Inheritance object Application Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Methods Run(CancellationToken) public Task<int> Run(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int>"
  },
  "api/TeaPie.ApplicationBuilder.html": {
    "href": "api/TeaPie.ApplicationBuilder.html",
    "title": "Class ApplicationBuilder | TeaPie",
    "summary": "Class ApplicationBuilder Namespace TeaPie Assembly TeaPie.dll public sealed class ApplicationBuilder Inheritance object ApplicationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Methods Build() public Application Build() Returns Application Create(bool) public static ApplicationBuilder Create(bool collectionRun = true) Parameters collectionRun bool Returns ApplicationBuilder WithDefaultPipeline() public ApplicationBuilder WithDefaultPipeline() Returns ApplicationBuilder WithEnvironment(string) public ApplicationBuilder WithEnvironment(string environmentName) Parameters environmentName string Returns ApplicationBuilder WithEnvironmentFile(string) public ApplicationBuilder WithEnvironmentFile(string environmentFilePath) Parameters environmentFilePath string Returns ApplicationBuilder WithInitializationScript(string) public ApplicationBuilder WithInitializationScript(string initializationScriptPath) Parameters initializationScriptPath string Returns ApplicationBuilder WithLogging(LogLevel, string, LogLevel) public ApplicationBuilder WithLogging(LogLevel minimumLevel, string pathToLogFile = \"\", LogLevel minimumLevelForLogFile = LogLevel.None) Parameters minimumLevel LogLevel pathToLogFile string minimumLevelForLogFile LogLevel Returns ApplicationBuilder WithPath(string) public ApplicationBuilder WithPath(string path) Parameters path string Returns ApplicationBuilder WithReportFile(string) public ApplicationBuilder WithReportFile(string reportFilePath) Parameters reportFilePath string Returns ApplicationBuilder WithStructureExplorationPipeline() public ApplicationBuilder WithStructureExplorationPipeline() Returns ApplicationBuilder WithTemporaryPath(string) public ApplicationBuilder WithTemporaryPath(string temporaryPath) Parameters temporaryPath string Returns ApplicationBuilder"
  },
  "api/TeaPie.Http.Auth.IAuthOptions.html": {
    "href": "api/TeaPie.Http.Auth.IAuthOptions.html",
    "title": "Interface IAuthOptions | TeaPie",
    "summary": "Interface IAuthOptions Namespace TeaPie.Http.Auth Assembly TeaPie.dll public interface IAuthOptions Extension Methods JsonExtensions.ToJsonString(object)"
  },
  "api/TeaPie.Http.Auth.IAuthProvider-1.html": {
    "href": "api/TeaPie.Http.Auth.IAuthProvider-1.html",
    "title": "Interface IAuthProvider<TOptions> | TeaPie",
    "summary": "Interface IAuthProvider<TOptions> Namespace TeaPie.Http.Auth Assembly TeaPie.dll public interface IAuthProvider<TOptions> : IAuthProvider where TOptions : IAuthOptions Type Parameters TOptions Inherited Members IAuthProvider.Authenticate(HttpRequestMessage, CancellationToken) Extension Methods JsonExtensions.ToJsonString(object) Methods ConfigureOptions(TOptions) IAuthProvider<TOptions> ConfigureOptions(TOptions options) Parameters options TOptions Returns IAuthProvider<TOptions>"
  },
  "api/TeaPie.Http.Auth.IAuthProvider.html": {
    "href": "api/TeaPie.Http.Auth.IAuthProvider.html",
    "title": "Interface IAuthProvider | TeaPie",
    "summary": "Interface IAuthProvider Namespace TeaPie.Http.Auth Assembly TeaPie.dll public interface IAuthProvider Extension Methods JsonExtensions.ToJsonString(object) Methods Authenticate(HttpRequestMessage, CancellationToken) Task Authenticate(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task"
  },
  "api/TeaPie.Http.Auth.OAuth2.OAuth2Options.html": {
    "href": "api/TeaPie.Http.Auth.OAuth2.OAuth2Options.html",
    "title": "Class OAuth2Options | TeaPie",
    "summary": "Class OAuth2Options Namespace TeaPie.Http.Auth.OAuth2 Assembly TeaPie.dll public class OAuth2Options : IAuthOptions Inheritance object OAuth2Options Implements IAuthOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Properties AdditionalParameters public IReadOnlyDictionary<string, string> AdditionalParameters { get; } Property Value IReadOnlyDictionary<string, string> AuthUrl public string AuthUrl { get; } Property Value string ClientId public string? ClientId { get; } Property Value string ClientSecret public string? ClientSecret { get; } Property Value string GrantType public string? GrantType { get; } Property Value string Password public string? Password { get; } Property Value string RedirectUri public Uri? RedirectUri { get; } Property Value Uri Username public string? Username { get; } Property Value string"
  },
  "api/TeaPie.Http.Auth.OAuth2.OAuth2OptionsBuilder.html": {
    "href": "api/TeaPie.Http.Auth.OAuth2.OAuth2OptionsBuilder.html",
    "title": "Class OAuth2OptionsBuilder | TeaPie",
    "summary": "Class OAuth2OptionsBuilder Namespace TeaPie.Http.Auth.OAuth2 Assembly TeaPie.dll public sealed class OAuth2OptionsBuilder Inheritance object OAuth2OptionsBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Methods AddParameter(string, string) public OAuth2OptionsBuilder AddParameter(string key, string value) Parameters key string value string Returns OAuth2OptionsBuilder Build() public OAuth2Options Build() Returns OAuth2Options Create() public static OAuth2OptionsBuilder Create() Returns OAuth2OptionsBuilder WithAuthUrl(string) public OAuth2OptionsBuilder WithAuthUrl(string oauthUrl) Parameters oauthUrl string Returns OAuth2OptionsBuilder WithClientId(string) public OAuth2OptionsBuilder WithClientId(string clientId) Parameters clientId string Returns OAuth2OptionsBuilder WithClientSecret(string) public OAuth2OptionsBuilder WithClientSecret(string clientSecret) Parameters clientSecret string Returns OAuth2OptionsBuilder WithGrantType(string) public OAuth2OptionsBuilder WithGrantType(string grantType) Parameters grantType string Returns OAuth2OptionsBuilder WithPassword(string) public OAuth2OptionsBuilder WithPassword(string password) Parameters password string Returns OAuth2OptionsBuilder WithUsername(string) public OAuth2OptionsBuilder WithUsername(string username) Parameters username string Returns OAuth2OptionsBuilder"
  },
  "api/TeaPie.Http.Auth.OAuth2.TeaPieOAuth2Extensions.html": {
    "href": "api/TeaPie.Http.Auth.OAuth2.TeaPieOAuth2Extensions.html",
    "title": "Class TeaPieOAuth2Extensions | TeaPie",
    "summary": "Class TeaPieOAuth2Extensions Namespace TeaPie.Http.Auth.OAuth2 Assembly TeaPie.dll public static class TeaPieOAuth2Extensions Inheritance object TeaPieOAuth2Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureOAuth2Provider(TeaPie, OAuth2Options) Configures options for OAuth2 authentication provider. public static void ConfigureOAuth2Provider(this TeaPie teaPie, OAuth2Options options) Parameters teaPie TeaPie The current context instance. options OAuth2Options Options with which OAuth2 authentication provider will be configured. SetOAuth2AsDefaultAuthProvider(TeaPie) Sets OAuth2 authentication provider as default. public static void SetOAuth2AsDefaultAuthProvider(this TeaPie teaPie) Parameters teaPie TeaPie The current context instance."
  },
  "api/TeaPie.Http.Auth.OAuth2.html": {
    "href": "api/TeaPie.Http.Auth.OAuth2.html",
    "title": "Namespace TeaPie.Http.Auth.OAuth2 | TeaPie",
    "summary": "Namespace TeaPie.Http.Auth.OAuth2 Classes OAuth2Options OAuth2OptionsBuilder TeaPieOAuth2Extensions"
  },
  "api/TeaPie.Http.Auth.TeaPieAuthenticationExtensions.html": {
    "href": "api/TeaPie.Http.Auth.TeaPieAuthenticationExtensions.html",
    "title": "Class TeaPieAuthenticationExtensions | TeaPie",
    "summary": "Class TeaPieAuthenticationExtensions Namespace TeaPie.Http.Auth Assembly TeaPie.dll public static class TeaPieAuthenticationExtensions Inheritance object TeaPieAuthenticationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterAuthProvider(TeaPie, string, IAuthProvider) Registers an authentication provider with the specified name. public static void RegisterAuthProvider(this TeaPie teaPie, string name, IAuthProvider authenticationProvider) Parameters teaPie TeaPie The current context instance. name string The name under which the authentication provider will be registered. authenticationProvider IAuthProvider The authentication provider to register. RegisterDefaultAuthProvider(TeaPie, string, IAuthProvider) Registers an authentication provider with the specified name and sets it as the default provider. public static void RegisterDefaultAuthProvider(this TeaPie teaPie, string name, IAuthProvider authenticationProvider) Parameters teaPie TeaPie The current context instance. name string The name under which the authentication provider will be registered. authenticationProvider IAuthProvider The authentication provider to register. SetDefaultAuthProvider(TeaPie, string) Sets the default authentication provider for all requests. A different authentication provider can still be specified for individual requests using a directive. public static void SetDefaultAuthProvider(this TeaPie teaPie, string name) Parameters teaPie TeaPie The current context instance. name string The name of a previously registered authentication provider to set as default. Exceptions InvalidOperationException Thrown if no authentication provider is registered with the specified name."
  },
  "api/TeaPie.Http.Auth.html": {
    "href": "api/TeaPie.Http.Auth.html",
    "title": "Namespace TeaPie.Http.Auth | TeaPie",
    "summary": "Namespace TeaPie.Http.Auth Classes TeaPieAuthenticationExtensions Interfaces IAuthOptions IAuthProvider IAuthProvider<TOptions>"
  },
  "api/TeaPie.Http.HttpMessagesExtensions.html": {
    "href": "api/TeaPie.Http.HttpMessagesExtensions.html",
    "title": "Class HttpMessagesExtensions | TeaPie",
    "summary": "Class HttpMessagesExtensions Namespace TeaPie.Http Assembly TeaPie.dll public static class HttpMessagesExtensions Inheritance object HttpMessagesExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBody(HttpRequestMessage) Gets the body content as a string from the specified request. public static string GetBody(this HttpRequestMessage request) Parameters request HttpRequestMessage The HTTP request message to extract the body content from. Returns string The body content as a string. Returns an empty string if the content is null. GetBody(HttpResponseMessage) Gets the body content as a string from the specified response. public static string GetBody(this HttpResponseMessage response) Parameters response HttpResponseMessage The HTTP response message to extract the body content from. Returns string The body content as a string. Returns an empty string if the content is null. GetBodyAsExpando(HttpRequestMessage) Gets the body content as a CaseInsensitiveExpandoObject from the specified request. This is possible only if the body content is in JSON structure. public static CaseInsensitiveExpandoObject GetBodyAsExpando(this HttpRequestMessage request) Parameters request HttpRequestMessage The HTTP request message to extract the body content from. Returns CaseInsensitiveExpandoObject The body content as a CaseInsensitiveExpandoObject. GetBodyAsExpando(HttpResponseMessage) Gets the body content as a CaseInsensitiveExpandoObject from the specified response. This is possible only if the body content is in JSON structure. public static CaseInsensitiveExpandoObject GetBodyAsExpando(this HttpResponseMessage response) Parameters response HttpResponseMessage The HTTP response message to extract the body content from. Returns CaseInsensitiveExpandoObject The body content as a CaseInsensitiveExpandoObject. GetBodyAsExpandoAsync(HttpRequestMessage) Asynchronously gets the body content as a CaseInsensitiveExpandoObject from the specified request. This is possible only if the body content is in JSON structure. public static Task<CaseInsensitiveExpandoObject> GetBodyAsExpandoAsync(this HttpRequestMessage request) Parameters request HttpRequestMessage The HTTP request message to extract the body content from. Returns Task<CaseInsensitiveExpandoObject> A Task that represents the asynchronous operation. The result is the body content as a CaseInsensitiveExpandoObject. GetBodyAsExpandoAsync(HttpResponseMessage) Asynchronously gets the body content as a CaseInsensitiveExpandoObject from the specified response. This is possible only if the body content is in JSON structure. public static Task<CaseInsensitiveExpandoObject> GetBodyAsExpandoAsync(this HttpResponseMessage response) Parameters response HttpResponseMessage The HTTP response message to extract the body content from. Returns Task<CaseInsensitiveExpandoObject> A Task that represents the asynchronous operation. The result is the body content as a CaseInsensitiveExpandoObject. GetBodyAsync(HttpRequestMessage) Asynchronously gets the body content as a string from the specified request. public static Task<string> GetBodyAsync(this HttpRequestMessage request) Parameters request HttpRequestMessage The HTTP request message to extract the body content from. Returns Task<string> A Task that represents the asynchronous operation. The result is the body content as a string. Returns an empty string if the content is null. GetBodyAsync(HttpResponseMessage) Asynchronously gets the body content as a string from the specified response. public static Task<string> GetBodyAsync(this HttpResponseMessage response) Parameters response HttpResponseMessage The HTTP response message to extract the body content from. Returns Task<string> A Task that represents the asynchronous operation. The result is the body content as a string. Returns an empty string if the content is null. GetBodyAsync<TResult>(HttpRequestMessage) Asynchronously gets the body content as a TResult from the specified request. This is possible only if the body content is in JSON structure. public static Task<TResult?> GetBodyAsync<TResult>(this HttpRequestMessage request) Parameters request HttpRequestMessage The HTTP request message to extract the body content from. Returns Task<TResult> A Task that represents the asynchronous operation. The result is the body content as a TResult. Type Parameters TResult Type which JSON body content will be deserialized to. GetBodyAsync<TResult>(HttpResponseMessage) Asynchronously gets the body content as a TResult from the specified response. This is possible only if the body content is in JSON structure. public static Task<TResult?> GetBodyAsync<TResult>(this HttpResponseMessage response) Parameters response HttpResponseMessage The HTTP response message to extract the body content from. Returns Task<TResult> A Task that represents the asynchronous operation. The result is the body content as a TResult. Type Parameters TResult Type which JSON body content will be deserialized to. GetBody<TResult>(HttpRequestMessage) Gets the body content as a TResult from the specified request. This is possible only if the body content is in JSON structure. public static TResult? GetBody<TResult>(this HttpRequestMessage request) Parameters request HttpRequestMessage The HTTP request message to extract the body content from. Returns TResult The body content as a TResult. Type Parameters TResult Type which JSON body content will be deserialized to. GetBody<TResult>(HttpResponseMessage) Gets the body content as a TResult from the specified response. This is possible only if the body content is in JSON structure. public static TResult? GetBody<TResult>(this HttpResponseMessage response) Parameters response HttpResponseMessage The HTTP response message to extract the body content from. Returns TResult The body content as a TResult. Type Parameters TResult Type which JSON body content will be deserialized to. StatusCode(HttpResponseMessage) Gets the status code as an int from the specified response. public static int StatusCode(this HttpResponseMessage response) Parameters response HttpResponseMessage The HTTP response to extract the status code from. Returns int The status code as an int."
  },
  "api/TeaPie.Http.Retrying.TeaPieRetryingExtensions.html": {
    "href": "api/TeaPie.Http.Retrying.TeaPieRetryingExtensions.html",
    "title": "Class TeaPieRetryingExtensions | TeaPie",
    "summary": "Class TeaPieRetryingExtensions Namespace TeaPie.Http.Retrying Assembly TeaPie.dll public static class TeaPieRetryingExtensions Inheritance object TeaPieRetryingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterRetryStrategy(TeaPie, string, RetryStrategyOptions<HttpResponseMessage>) Registers retryStrategy with given name. public static void RegisterRetryStrategy(this TeaPie teaPie, string name, RetryStrategyOptions<HttpResponseMessage> retryStrategy) Parameters teaPie TeaPie The current context instance. name string Name by which retry strategy will be registered. retryStrategy RetryStrategyOptions<HttpResponseMessage> Retry strategy to be registered."
  },
  "api/TeaPie.Http.Retrying.html": {
    "href": "api/TeaPie.Http.Retrying.html",
    "title": "Namespace TeaPie.Http.Retrying | TeaPie",
    "summary": "Namespace TeaPie.Http.Retrying Classes TeaPieRetryingExtensions"
  },
  "api/TeaPie.Http.html": {
    "href": "api/TeaPie.Http.html",
    "title": "Namespace TeaPie.Http | TeaPie",
    "summary": "Namespace TeaPie.Http Classes HttpMessagesExtensions"
  },
  "api/TeaPie.IApplicationContext.html": {
    "href": "api/TeaPie.IApplicationContext.html",
    "title": "Interface IApplicationContext | TeaPie",
    "summary": "Interface IApplicationContext Namespace TeaPie Assembly TeaPie.dll public interface IApplicationContext Extension Methods JsonExtensions.ToJsonString(object) Properties EnvironmentName string EnvironmentName { get; } Property Value string Logger ILogger Logger { get; } Property Value ILogger Path string Path { get; } Property Value string Reporter ITestResultsSummaryReporter Reporter { get; } Property Value ITestResultsSummaryReporter ServiceProvider IServiceProvider ServiceProvider { get; } Property Value IServiceProvider"
  },
  "api/TeaPie.Json.CaseInsensitiveExpandoObject.html": {
    "href": "api/TeaPie.Json.CaseInsensitiveExpandoObject.html",
    "title": "Class CaseInsensitiveExpandoObject | TeaPie",
    "summary": "Class CaseInsensitiveExpandoObject Namespace TeaPie.Json Assembly TeaPie.dll public class CaseInsensitiveExpandoObject : DynamicObject, IDynamicMetaObjectProvider Inheritance object DynamicObject CaseInsensitiveExpandoObject Implements IDynamicMetaObjectProvider Inherited Members DynamicObject.GetMetaObject(Expression) DynamicObject.TryBinaryOperation(BinaryOperationBinder, object, out object) DynamicObject.TryConvert(ConvertBinder, out object) DynamicObject.TryCreateInstance(CreateInstanceBinder, object[], out object) DynamicObject.TryDeleteIndex(DeleteIndexBinder, object[]) DynamicObject.TryDeleteMember(DeleteMemberBinder) DynamicObject.TryGetIndex(GetIndexBinder, object[], out object) DynamicObject.TryInvoke(InvokeBinder, object[], out object) DynamicObject.TryInvokeMember(InvokeMemberBinder, object[], out object) DynamicObject.TrySetIndex(SetIndexBinder, object[], object) DynamicObject.TryUnaryOperation(UnaryOperationBinder, out object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Constructors CaseInsensitiveExpandoObject(IDictionary<string, object?>) public CaseInsensitiveExpandoObject(IDictionary<string, object?> dictionary) Parameters dictionary IDictionary<string, object> Methods GetDynamicMemberNames() Returns the enumeration of all dynamic member names. public override IEnumerable<string> GetDynamicMemberNames() Returns IEnumerable<string> A sequence that contains dynamic member names. TryGetMember(GetMemberBinder, out object?) Provides the implementation for operations that get member values. Classes derived from the DynamicObject class can override this method to specify dynamic behavior for operations such as getting a value for a property. public override bool TryGetMember(GetMemberBinder binder, out object? result) Parameters binder GetMemberBinder Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the DynamicObject class, binder.Name returns \"SampleProperty\". The binder.IgnoreCase property specifies whether the member name is case-sensitive. result object The result of the get operation. For example, if the method is called for a property, you can assign the property value to result. Returns bool true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.) TrySetMember(SetMemberBinder, object?) Provides the implementation for operations that set member values. Classes derived from the DynamicObject class can override this method to specify dynamic behavior for operations such as setting a value for a property. public override bool TrySetMember(SetMemberBinder binder, object? value) Parameters binder SetMemberBinder Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = \"Test\", where sampleObject is an instance of the class derived from the DynamicObject class, binder.Name returns \"SampleProperty\". The binder.IgnoreCase property specifies whether the member name is case-sensitive. value object The value to set to the member. For example, for sampleObject.SampleProperty = \"Test\", where sampleObject is an instance of the class derived from the DynamicObject class, the value is \"Test\". Returns bool true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)"
  },
  "api/TeaPie.Json.JsonExtensions.html": {
    "href": "api/TeaPie.Json.JsonExtensions.html",
    "title": "Class JsonExtensions | TeaPie",
    "summary": "Class JsonExtensions Namespace TeaPie.Json Assembly TeaPie.dll public static class JsonExtensions Inheritance object JsonExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToExpando(string) Parses given text (in JSON structure) to case-insensitive expando object (CaseInsensitiveExpandoObject). public static CaseInsensitiveExpandoObject ToExpando(this string jsonText) Parameters jsonText string Text to be parsed into case-insensitive expando object (CaseInsensitiveExpandoObject). Returns CaseInsensitiveExpandoObject CaseInsensitiveExpandoObject representation of JSON stored in jsonText. ToJson(string) Parses given text to Newtonsoft.Json.Linq.JObject form. public static JObject ToJson(this string text) Parameters text string Text to be parsed into Newtonsoft.Json.Linq.JObject. Returns JObject Newtonsoft.Json.Linq.JObject representation of JSON within text. ToJsonString(object) Serializes object to string in JSON structure. public static string ToJsonString(this object obj) Parameters obj object Object that should be serialized to JSON structured string. Returns string string which represents obj in JSON structure. To<TResult>(string) Convert JSON string to TResult. public static TResult? To<TResult>(this string jsonText) Parameters jsonText string String in JSON structure, object should be extracted from. Returns TResult jsonText in a TResult form. Type Parameters TResult Type which JSON string will be deserialized to."
  },
  "api/TeaPie.Json.html": {
    "href": "api/TeaPie.Json.html",
    "title": "Namespace TeaPie.Json | TeaPie",
    "summary": "Namespace TeaPie.Json Classes CaseInsensitiveExpandoObject JsonExtensions"
  },
  "api/TeaPie.PathExtensions.html": {
    "href": "api/TeaPie.PathExtensions.html",
    "title": "Class PathExtensions | TeaPie",
    "summary": "Class PathExtensions Namespace TeaPie Assembly TeaPie.dll public static class PathExtensions Inheritance object PathExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NormalizePath(string, bool) public static string NormalizePath(this string path, bool rootPath = false) Parameters path string rootPath bool Returns string"
  },
  "api/TeaPie.Reporting.ICompositeReporter-2.html": {
    "href": "api/TeaPie.Reporting.ICompositeReporter-2.html",
    "title": "Interface ICompositeReporter<TReporterType, TReportedObject> | TeaPie",
    "summary": "Interface ICompositeReporter<TReporterType, TReportedObject> Namespace TeaPie.Reporting Assembly TeaPie.dll public interface ICompositeReporter<TReporterType, TReportedObject> : IReporter where TReporterType : IReporter<TReportedObject> Type Parameters TReporterType TReportedObject Inherited Members IReporter.Report() Extension Methods JsonExtensions.ToJsonString(object) Methods RegisterReporter(TReporterType) void RegisterReporter(TReporterType reporter) Parameters reporter TReporterType UnregisterReporter(TReporterType) void UnregisterReporter(TReporterType reporter) Parameters reporter TReporterType"
  },
  "api/TeaPie.Reporting.IReporter-1.html": {
    "href": "api/TeaPie.Reporting.IReporter-1.html",
    "title": "Interface IReporter<TReportedObject> | TeaPie",
    "summary": "Interface IReporter<TReportedObject> Namespace TeaPie.Reporting Assembly TeaPie.dll public interface IReporter<TReportedObject> Type Parameters TReportedObject Extension Methods JsonExtensions.ToJsonString(object) Methods Report(TReportedObject) void Report(TReportedObject report) Parameters report TReportedObject"
  },
  "api/TeaPie.Reporting.IReporter.html": {
    "href": "api/TeaPie.Reporting.IReporter.html",
    "title": "Interface IReporter | TeaPie",
    "summary": "Interface IReporter Namespace TeaPie.Reporting Assembly TeaPie.dll public interface IReporter Extension Methods JsonExtensions.ToJsonString(object) Methods Report() void Report()"
  },
  "api/TeaPie.Reporting.ITestResultsSummaryReporter.html": {
    "href": "api/TeaPie.Reporting.ITestResultsSummaryReporter.html",
    "title": "Interface ITestResultsSummaryReporter | TeaPie",
    "summary": "Interface ITestResultsSummaryReporter Namespace TeaPie.Reporting Assembly TeaPie.dll public interface ITestResultsSummaryReporter : ICompositeReporter<IReporter<TestResultsSummary>, TestResultsSummary>, IReporter Inherited Members ICompositeReporter<IReporter<TestResultsSummary>, TestResultsSummary>.RegisterReporter(IReporter<TestResultsSummary>) ICompositeReporter<IReporter<TestResultsSummary>, TestResultsSummary>.UnregisterReporter(IReporter<TestResultsSummary>) IReporter.Report() Extension Methods JsonExtensions.ToJsonString(object) Methods Initialize() void Initialize() RegisterTestResult(string, TestResult) void RegisterTestResult(string testCaseName, TestResult testResult) Parameters testCaseName string testResult TestResult"
  },
  "api/TeaPie.Reporting.TeaPieReportingExtensions.html": {
    "href": "api/TeaPie.Reporting.TeaPieReportingExtensions.html",
    "title": "Class TeaPieReportingExtensions | TeaPie",
    "summary": "Class TeaPieReportingExtensions Namespace TeaPie.Reporting Assembly TeaPie.dll public static class TeaPieReportingExtensions Inheritance object TeaPieReportingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterReporter(TeaPie, Action<TestResultsSummary>) Registers an inline reporter that reports a test results summary using the specified onReportAction. The report is generated at the end of the pipeline run. public static void RegisterReporter(this TeaPie teaPie, Action<TestResultsSummary> onReportAction) Parameters teaPie TeaPie The current context instance. onReportAction Action<TestResultsSummary> The action to be executed for test results summary report. RegisterReporter(TeaPie, IReporter<TestResultsSummary>) Registers a reporter to generate a test results summary at the end of the pipeline run. public static void RegisterReporter(this TeaPie teaPie, IReporter<TestResultsSummary> reporter) Parameters teaPie TeaPie The current context instance. reporter IReporter<TestResultsSummary> The reporter instance to be added to the collection of reporters."
  },
  "api/TeaPie.Reporting.html": {
    "href": "api/TeaPie.Reporting.html",
    "title": "Namespace TeaPie.Reporting | TeaPie",
    "summary": "Namespace TeaPie.Reporting Classes TeaPieReportingExtensions Interfaces ICompositeReporter<TReporterType, TReportedObject> IReporter IReporter<TReportedObject> ITestResultsSummaryReporter"
  },
  "api/TeaPie.Scripts.Globals.html": {
    "href": "api/TeaPie.Scripts.Globals.html",
    "title": "Class Globals | TeaPie",
    "summary": "Class Globals Namespace TeaPie.Scripts Assembly TeaPie.dll public class Globals Inheritance object Globals Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Properties tp public TeaPie? tp { get; set; } Property Value TeaPie"
  },
  "api/TeaPie.Scripts.html": {
    "href": "api/TeaPie.Scripts.html",
    "title": "Namespace TeaPie.Scripts | TeaPie",
    "summary": "Namespace TeaPie.Scripts Classes Globals"
  },
  "api/TeaPie.TeaPie.html": {
    "href": "api/TeaPie.TeaPie.html",
    "title": "Class TeaPie | TeaPie",
    "summary": "Class TeaPie Namespace TeaPie Assembly TeaPie.dll public sealed class TeaPie Inheritance object TeaPie Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) TeaPieOAuth2Extensions.ConfigureOAuth2Provider(TeaPie, OAuth2Options) TeaPieOAuth2Extensions.SetOAuth2AsDefaultAuthProvider(TeaPie) TeaPieAuthenticationExtensions.RegisterAuthProvider(TeaPie, string, IAuthProvider) TeaPieAuthenticationExtensions.RegisterDefaultAuthProvider(TeaPie, string, IAuthProvider) TeaPieAuthenticationExtensions.SetDefaultAuthProvider(TeaPie, string) TeaPieRetryingExtensions.RegisterRetryStrategy(TeaPie, string, RetryStrategyOptions<HttpResponseMessage>) TeaPieReportingExtensions.RegisterReporter(TeaPie, Action<TestResultsSummary>) TeaPieReportingExtensions.RegisterReporter(TeaPie, IReporter<TestResultsSummary>) TeaPieTestingExtensions.RegisterTestDirective(TeaPie, string, string, Func<IReadOnlyDictionary<string, string>, string>, Func<HttpResponseMessage, IReadOnlyDictionary<string, string>, Task>) TeaPieTestingExtensions.Test(TeaPie, string, Action, bool) TeaPieTestingExtensions.Test(TeaPie, string, Func<Task>, bool) TeaPieVariablesExtensions.ContainsVariable(TeaPie, string) TeaPieVariablesExtensions.RemoveVariable(TeaPie, string) TeaPieVariablesExtensions.RemoveVariablesWithTag(TeaPie, string) Properties ApplicationContext public IApplicationContext ApplicationContext { get; } Property Value IApplicationContext CollectionVariables public VariablesCollection CollectionVariables { get; } Property Value VariablesCollection EnvironmentVariables public VariablesCollection EnvironmentVariables { get; } Property Value VariablesCollection GlobalVariables public VariablesCollection GlobalVariables { get; } Property Value VariablesCollection Instance public static TeaPie? Instance { get; } Property Value TeaPie Logger public ILogger Logger { get; } Property Value ILogger Request The most recently executed HTTP request. public HttpRequestMessage? Request { get; } Property Value HttpRequestMessage Requests Collection of current test case's HTTP requests accessible by names. public IReadOnlyDictionary<string, HttpRequestMessage> Requests { get; } Property Value IReadOnlyDictionary<string, HttpRequestMessage> Response The most recently retrieved HTTP response. public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage Responses Collection of current test case's HTTP responses accessible by names. public IReadOnlyDictionary<string, HttpResponseMessage> Responses { get; } Property Value IReadOnlyDictionary<string, HttpResponseMessage> TestCaseVariables public VariablesCollection TestCaseVariables { get; } Property Value VariablesCollection Methods GetVariable<T>(string, T?) Attempts to retrieve the first matching variable with the specified name of type T. If no such variable is found, the defaultValue is returned. Variables are searched across all levels in the following order: TestCaseVariables, CollectionVariables, EnvironmentVariables, GlobalVariables. public T? GetVariable<T>(string name, T? defaultValue = default) Parameters name string The name of the variable to retrieve. defaultValue T The value to return if no variable with the specified name and T type is found. Returns T The variable with the specified name of type T, or defaultValue if no matching variable is found. Type Parameters T The type of the variable to retrieve. SetEnvironment(string) Set environment to one with given name. Environment must be defined in the environment file. public void SetEnvironment(string name) Parameters name string Name of the environment to be set. SetVariable<T>(string, T, params string[]) Stores a variable with the specified name of type T at the Collection level. The variable is tagged with the specified tags, which are optional. public void SetVariable<T>(string name, T value, params string[] tags) Parameters name string The name under which the variable will be stored. value T The value of the variable to store. tags string[] An optional list of tags associated with the variable. Type Parameters T The type of the variable to store."
  },
  "api/TeaPie.Testing.CollectionTestResultsSummary.html": {
    "href": "api/TeaPie.Testing.CollectionTestResultsSummary.html",
    "title": "Class CollectionTestResultsSummary | TeaPie",
    "summary": "Class CollectionTestResultsSummary Namespace TeaPie.Testing Assembly TeaPie.dll public class CollectionTestResultsSummary : TestResultsSummary Inheritance object TestResultsSummary CollectionTestResultsSummary Inherited Members TestResultsSummary.Timestamp TestResultsSummary.AllTestsPassed TestResultsSummary.HasSkippedTests TestResultsSummary.NumberOfSkippedTests TestResultsSummary.NumberOfPassedTests TestResultsSummary.NumberOfFailedTests TestResultsSummary.TimeElapsedDuringTesting TestResultsSummary.NumberOfTests TestResultsSummary.NumberOfExecutedTests TestResultsSummary.PercentageOfSkippedTests TestResultsSummary.PercentageOfPassedTests TestResultsSummary.PercentageOfFailedTests TestResultsSummary.TestResults TestResultsSummary.SkippedTests TestResultsSummary.PassedTests TestResultsSummary.FailedTests object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Constructors CollectionTestResultsSummary(string) public CollectionTestResultsSummary(string name = \"\") Parameters name string Properties Name public string Name { get; } Property Value string TestCases public IReadOnlyDictionary<string, TestCaseTestResultsSummary> TestCases { get; } Property Value IReadOnlyDictionary<string, TestCaseTestResultsSummary>"
  },
  "api/TeaPie.Testing.TeaPieTestingExtensions.html": {
    "href": "api/TeaPie.Testing.TeaPieTestingExtensions.html",
    "title": "Class TeaPieTestingExtensions | TeaPie",
    "summary": "Class TeaPieTestingExtensions Namespace TeaPie.Testing Assembly TeaPie.dll public static class TeaPieTestingExtensions Inheritance object TeaPieTestingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterTestDirective(TeaPie, string, string, Func<IReadOnlyDictionary<string, string>, string>, Func<HttpResponseMessage, IReadOnlyDictionary<string, string>, Task>) Registers a custom test directive that can be used within a '.http' file for any request. public static void RegisterTestDirective(this TeaPie teaPie, string directiveName, string directivePattern, Func<IReadOnlyDictionary<string, string>, string> testNameGetter, Func<HttpResponseMessage, IReadOnlyDictionary<string, string>, Task> testFunction) Parameters teaPie TeaPie The current context instance. directiveName string The name of the directive, excluding the 'TEST-' prefix. directivePattern string The regular expression pattern for matching the directive. Use TestDirectivePatternBuilder for easier pattern composition. testNameGetter Func<IReadOnlyDictionary<string, string>, string> A function that generates the full test name. A dictionary of parameters is provided for customization of the test name. testFunction Func<HttpResponseMessage, IReadOnlyDictionary<string, string>, Task> The test function to execute when the directive is applied. The function receives the HTTP response as an HttpResponseMessage and a dictionary of parameters. Test(TeaPie, string, Action, bool) Executes the specified testFunction as a test method. If testFunction throws an exception, the test is considered failed. If no exception is thrown, the test is considered passed. The test will be referenced by testName in the results. public static void Test(this TeaPie teaPie, string testName, Action testFunction, bool skipTest = false) Parameters teaPie TeaPie The current context instance. testName string The name of the test. testFunction Action The testing function to execute. skipTest bool Indicates whether the test should be skipped (true) or normally executed (false). Defaults to false. Test(TeaPie, string, Func<Task>, bool) Executes the specified asynchronous testFunction as a test method. If testFunction throws an exception, the test is considered failed. If no exception is thrown, the test is considered passed. The test will be referenced by testName in the results. public static Task Test(this TeaPie teaPie, string testName, Func<Task> testFunction, bool skipTest = false) Parameters teaPie TeaPie The current context instance. testName string The name of the test. testFunction Func<Task> The asynchronous testing function to execute. skipTest bool Indicates whether the test should be skipped (true) or normally executed (false). Defaults to false. Returns Task"
  },
  "api/TeaPie.Testing.TestCaseTestResultsSummary.html": {
    "href": "api/TeaPie.Testing.TestCaseTestResultsSummary.html",
    "title": "Class TestCaseTestResultsSummary | TeaPie",
    "summary": "Class TestCaseTestResultsSummary Namespace TeaPie.Testing Assembly TeaPie.dll public class TestCaseTestResultsSummary : TestResultsSummary Inheritance object TestResultsSummary TestCaseTestResultsSummary Inherited Members TestResultsSummary.Timestamp TestResultsSummary.AllTestsPassed TestResultsSummary.HasSkippedTests TestResultsSummary.NumberOfSkippedTests TestResultsSummary.NumberOfPassedTests TestResultsSummary.NumberOfFailedTests TestResultsSummary.TimeElapsedDuringTesting TestResultsSummary.NumberOfTests TestResultsSummary.NumberOfExecutedTests TestResultsSummary.PercentageOfSkippedTests TestResultsSummary.PercentageOfPassedTests TestResultsSummary.PercentageOfFailedTests TestResultsSummary.TestResults TestResultsSummary.SkippedTests TestResultsSummary.PassedTests TestResultsSummary.FailedTests object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Constructors TestCaseTestResultsSummary(string) public TestCaseTestResultsSummary(string name) Parameters name string Properties Name public string Name { get; } Property Value string"
  },
  "api/TeaPie.Testing.TestDirectivePatternBuilder.html": {
    "href": "api/TeaPie.Testing.TestDirectivePatternBuilder.html",
    "title": "Class TestDirectivePatternBuilder | TeaPie",
    "summary": "Class TestDirectivePatternBuilder Namespace TeaPie.Testing Assembly TeaPie.dll A builder for constructing regular expression patterns for test directives used in '.http' files. public sealed class TestDirectivePatternBuilder Inheritance object TestDirectivePatternBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Methods AddBooleanArrayParameter(string?) Adds a parameter that accepts an array of bool. public TestDirectivePatternBuilder AddBooleanArrayParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddBooleanParameter(string?) Adds a bool parameter. public TestDirectivePatternBuilder AddBooleanParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddDateTimeParameter(string?) Adds a DateTime parameter. public TestDirectivePatternBuilder AddDateTimeParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddHeaderNameParameter(string?) Adds a parameter for HTTP header names. public TestDirectivePatternBuilder AddHeaderNameParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddNumberArrayParameter(string?) Adds a parameter that accepts an array of numbers. public TestDirectivePatternBuilder AddNumberArrayParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddNumberParameter(string?) Adds a numeric parameter. public TestDirectivePatternBuilder AddNumberParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddParameter(string, string?) Adds a custom parameter with a specified pattern. public TestDirectivePatternBuilder AddParameter(string pattern, string? parameterName = null) Parameters pattern string The regex pattern for the parameter. parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddStatusCodesParameter(string?) Adds a parameter for HTTP status codes. public TestDirectivePatternBuilder AddStatusCodesParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddStringArrayParameter(string?) Adds a parameter that accepts an array of string. public TestDirectivePatternBuilder AddStringArrayParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddStringParameter(string?) Adds a string parameter. public TestDirectivePatternBuilder AddStringParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. AddTimeOnlyParameter(string?) Adds a TimeOnly parameter. public TestDirectivePatternBuilder AddTimeOnlyParameter(string? parameterName = null) Parameters parameterName string The optional name of the parameter. If not provided, a default name (\"Parameter\" + index, starting from 1) is assigned (e.g., \"Parameter3\"). Returns TestDirectivePatternBuilder The updated TestDirectivePatternBuilder instance. Build() Builds the final directive pattern as a string. public string Build() Returns string The constructed directive pattern. Create(string) Creates a new instance of TestDirectivePatternBuilder. public static TestDirectivePatternBuilder Create(string directiveName) Parameters directiveName string The name of the directive. Returns TestDirectivePatternBuilder A new TestDirectivePatternBuilder instance."
  },
  "api/TeaPie.Testing.TestResult.Failed.html": {
    "href": "api/TeaPie.Testing.TestResult.Failed.html",
    "title": "Class TestResult.Failed | TeaPie",
    "summary": "Class TestResult.Failed Namespace TeaPie.Testing Assembly TeaPie.dll public sealed record TestResult.Failed : TestResult, IEquatable<TestResult>, IEquatable<TestResult.Failed> Inheritance object TestResult TestResult.Failed Implements IEquatable<TestResult> IEquatable<TestResult.Failed> Inherited Members TestResult.TestName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Constructors Failed(long, string, Exception?) public Failed(long Duration, string ErrorMessage, Exception? Exception) Parameters Duration long ErrorMessage string Exception Exception Properties Duration public long Duration { get; init; } Property Value long ErrorMessage public string ErrorMessage { get; init; } Property Value string Exception public Exception? Exception { get; init; } Property Value Exception Methods Match(Action<NotRun>, Action<Passed>, Action<Failed>) public override void Match(Action<TestResult.NotRun> notRun, Action<TestResult.Passed> passed, Action<TestResult.Failed> failed) Parameters notRun Action<TestResult.NotRun> passed Action<TestResult.Passed> failed Action<TestResult.Failed> MatchFailed(Action<Failed>, Action) public override void MatchFailed(Action<TestResult.Failed> failed, Action @else) Parameters failed Action<TestResult.Failed> else Action MatchFailed<TMatchOutput>(Func<Failed, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchFailed<TMatchOutput>(Func<TestResult.Failed, TMatchOutput> failed, Func<TMatchOutput> @else) Parameters failed Func<TestResult.Failed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchFailed<TState>(TState, Action<TState, Failed>, Action<TState>) public override void MatchFailed<TState>(TState state, Action<TState, TestResult.Failed> failed, Action<TState> @else) Parameters state TState failed Action<TState, TestResult.Failed> else Action<TState> Type Parameters TState MatchFailed<TState, TMatchOutput>(TState, Func<TState, Failed, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchFailed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Failed, TMatchOutput> failed, Func<TState, TMatchOutput> @else) Parameters state TState failed Func<TState, TestResult.Failed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchNotRun(Action<NotRun>, Action) public override void MatchNotRun(Action<TestResult.NotRun> notRun, Action @else) Parameters notRun Action<TestResult.NotRun> else Action MatchNotRun<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchNotRun<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TMatchOutput> @else) Parameters notRun Func<TestResult.NotRun, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchNotRun<TState>(TState, Action<TState, NotRun>, Action<TState>) public override void MatchNotRun<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState> @else) Parameters state TState notRun Action<TState, TestResult.NotRun> else Action<TState> Type Parameters TState MatchNotRun<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchNotRun<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TMatchOutput> @else) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchPassed(Action<Passed>, Action) public override void MatchPassed(Action<TestResult.Passed> passed, Action @else) Parameters passed Action<TestResult.Passed> else Action MatchPassed<TMatchOutput>(Func<Passed, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchPassed<TMatchOutput>(Func<TestResult.Passed, TMatchOutput> passed, Func<TMatchOutput> @else) Parameters passed Func<TestResult.Passed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchPassed<TState>(TState, Action<TState, Passed>, Action<TState>) public override void MatchPassed<TState>(TState state, Action<TState, TestResult.Passed> passed, Action<TState> @else) Parameters state TState passed Action<TState, TestResult.Passed> else Action<TState> Type Parameters TState MatchPassed<TState, TMatchOutput>(TState, Func<TState, Passed, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchPassed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TMatchOutput> @else) Parameters state TState passed Func<TState, TestResult.Passed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput Match<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<Passed, TMatchOutput>, Func<Failed, TMatchOutput>) public override TMatchOutput Match<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TestResult.Passed, TMatchOutput> passed, Func<TestResult.Failed, TMatchOutput> failed) Parameters notRun Func<TestResult.NotRun, TMatchOutput> passed Func<TestResult.Passed, TMatchOutput> failed Func<TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput Match<TState>(TState, Action<TState, NotRun>, Action<TState, Passed>, Action<TState, Failed>) public override void Match<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState, TestResult.Passed> passed, Action<TState, TestResult.Failed> failed) Parameters state TState notRun Action<TState, TestResult.NotRun> passed Action<TState, TestResult.Passed> failed Action<TState, TestResult.Failed> Type Parameters TState Match<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, Passed, TMatchOutput>, Func<TState, Failed, TMatchOutput>) public override TMatchOutput Match<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TestResult.Failed, TMatchOutput> failed) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> passed Func<TState, TestResult.Passed, TMatchOutput> failed Func<TState, TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput UnwrapFailed() public override TestResult.Failed UnwrapFailed() Returns TestResult.Failed UnwrapNotRun() public override TestResult.NotRun UnwrapNotRun() Returns TestResult.NotRun UnwrapPassed() public override TestResult.Passed UnwrapPassed() Returns TestResult.Passed"
  },
  "api/TeaPie.Testing.TestResult.NotRun.html": {
    "href": "api/TeaPie.Testing.TestResult.NotRun.html",
    "title": "Class TestResult.NotRun | TeaPie",
    "summary": "Class TestResult.NotRun Namespace TeaPie.Testing Assembly TeaPie.dll public sealed record TestResult.NotRun : TestResult, IEquatable<TestResult>, IEquatable<TestResult.NotRun> Inheritance object TestResult TestResult.NotRun Implements IEquatable<TestResult> IEquatable<TestResult.NotRun> Inherited Members TestResult.TestName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Methods Match(Action<NotRun>, Action<Passed>, Action<Failed>) public override void Match(Action<TestResult.NotRun> notRun, Action<TestResult.Passed> passed, Action<TestResult.Failed> failed) Parameters notRun Action<TestResult.NotRun> passed Action<TestResult.Passed> failed Action<TestResult.Failed> MatchFailed(Action<Failed>, Action) public override void MatchFailed(Action<TestResult.Failed> failed, Action @else) Parameters failed Action<TestResult.Failed> else Action MatchFailed<TMatchOutput>(Func<Failed, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchFailed<TMatchOutput>(Func<TestResult.Failed, TMatchOutput> failed, Func<TMatchOutput> @else) Parameters failed Func<TestResult.Failed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchFailed<TState>(TState, Action<TState, Failed>, Action<TState>) public override void MatchFailed<TState>(TState state, Action<TState, TestResult.Failed> failed, Action<TState> @else) Parameters state TState failed Action<TState, TestResult.Failed> else Action<TState> Type Parameters TState MatchFailed<TState, TMatchOutput>(TState, Func<TState, Failed, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchFailed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Failed, TMatchOutput> failed, Func<TState, TMatchOutput> @else) Parameters state TState failed Func<TState, TestResult.Failed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchNotRun(Action<NotRun>, Action) public override void MatchNotRun(Action<TestResult.NotRun> notRun, Action @else) Parameters notRun Action<TestResult.NotRun> else Action MatchNotRun<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchNotRun<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TMatchOutput> @else) Parameters notRun Func<TestResult.NotRun, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchNotRun<TState>(TState, Action<TState, NotRun>, Action<TState>) public override void MatchNotRun<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState> @else) Parameters state TState notRun Action<TState, TestResult.NotRun> else Action<TState> Type Parameters TState MatchNotRun<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchNotRun<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TMatchOutput> @else) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchPassed(Action<Passed>, Action) public override void MatchPassed(Action<TestResult.Passed> passed, Action @else) Parameters passed Action<TestResult.Passed> else Action MatchPassed<TMatchOutput>(Func<Passed, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchPassed<TMatchOutput>(Func<TestResult.Passed, TMatchOutput> passed, Func<TMatchOutput> @else) Parameters passed Func<TestResult.Passed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchPassed<TState>(TState, Action<TState, Passed>, Action<TState>) public override void MatchPassed<TState>(TState state, Action<TState, TestResult.Passed> passed, Action<TState> @else) Parameters state TState passed Action<TState, TestResult.Passed> else Action<TState> Type Parameters TState MatchPassed<TState, TMatchOutput>(TState, Func<TState, Passed, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchPassed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TMatchOutput> @else) Parameters state TState passed Func<TState, TestResult.Passed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput Match<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<Passed, TMatchOutput>, Func<Failed, TMatchOutput>) public override TMatchOutput Match<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TestResult.Passed, TMatchOutput> passed, Func<TestResult.Failed, TMatchOutput> failed) Parameters notRun Func<TestResult.NotRun, TMatchOutput> passed Func<TestResult.Passed, TMatchOutput> failed Func<TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput Match<TState>(TState, Action<TState, NotRun>, Action<TState, Passed>, Action<TState, Failed>) public override void Match<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState, TestResult.Passed> passed, Action<TState, TestResult.Failed> failed) Parameters state TState notRun Action<TState, TestResult.NotRun> passed Action<TState, TestResult.Passed> failed Action<TState, TestResult.Failed> Type Parameters TState Match<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, Passed, TMatchOutput>, Func<TState, Failed, TMatchOutput>) public override TMatchOutput Match<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TestResult.Failed, TMatchOutput> failed) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> passed Func<TState, TestResult.Passed, TMatchOutput> failed Func<TState, TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput UnwrapFailed() public override TestResult.Failed UnwrapFailed() Returns TestResult.Failed UnwrapNotRun() public override TestResult.NotRun UnwrapNotRun() Returns TestResult.NotRun UnwrapPassed() public override TestResult.Passed UnwrapPassed() Returns TestResult.Passed"
  },
  "api/TeaPie.Testing.TestResult.Passed.html": {
    "href": "api/TeaPie.Testing.TestResult.Passed.html",
    "title": "Class TestResult.Passed | TeaPie",
    "summary": "Class TestResult.Passed Namespace TeaPie.Testing Assembly TeaPie.dll public sealed record TestResult.Passed : TestResult, IEquatable<TestResult>, IEquatable<TestResult.Passed> Inheritance object TestResult TestResult.Passed Implements IEquatable<TestResult> IEquatable<TestResult.Passed> Inherited Members TestResult.TestName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Constructors Passed(long) public Passed(long Duration) Parameters Duration long Properties Duration public long Duration { get; init; } Property Value long Methods Match(Action<NotRun>, Action<Passed>, Action<Failed>) public override void Match(Action<TestResult.NotRun> notRun, Action<TestResult.Passed> passed, Action<TestResult.Failed> failed) Parameters notRun Action<TestResult.NotRun> passed Action<TestResult.Passed> failed Action<TestResult.Failed> MatchFailed(Action<Failed>, Action) public override void MatchFailed(Action<TestResult.Failed> failed, Action @else) Parameters failed Action<TestResult.Failed> else Action MatchFailed<TMatchOutput>(Func<Failed, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchFailed<TMatchOutput>(Func<TestResult.Failed, TMatchOutput> failed, Func<TMatchOutput> @else) Parameters failed Func<TestResult.Failed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchFailed<TState>(TState, Action<TState, Failed>, Action<TState>) public override void MatchFailed<TState>(TState state, Action<TState, TestResult.Failed> failed, Action<TState> @else) Parameters state TState failed Action<TState, TestResult.Failed> else Action<TState> Type Parameters TState MatchFailed<TState, TMatchOutput>(TState, Func<TState, Failed, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchFailed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Failed, TMatchOutput> failed, Func<TState, TMatchOutput> @else) Parameters state TState failed Func<TState, TestResult.Failed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchNotRun(Action<NotRun>, Action) public override void MatchNotRun(Action<TestResult.NotRun> notRun, Action @else) Parameters notRun Action<TestResult.NotRun> else Action MatchNotRun<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchNotRun<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TMatchOutput> @else) Parameters notRun Func<TestResult.NotRun, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchNotRun<TState>(TState, Action<TState, NotRun>, Action<TState>) public override void MatchNotRun<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState> @else) Parameters state TState notRun Action<TState, TestResult.NotRun> else Action<TState> Type Parameters TState MatchNotRun<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchNotRun<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TMatchOutput> @else) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchPassed(Action<Passed>, Action) public override void MatchPassed(Action<TestResult.Passed> passed, Action @else) Parameters passed Action<TestResult.Passed> else Action MatchPassed<TMatchOutput>(Func<Passed, TMatchOutput>, Func<TMatchOutput>) public override TMatchOutput MatchPassed<TMatchOutput>(Func<TestResult.Passed, TMatchOutput> passed, Func<TMatchOutput> @else) Parameters passed Func<TestResult.Passed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchPassed<TState>(TState, Action<TState, Passed>, Action<TState>) public override void MatchPassed<TState>(TState state, Action<TState, TestResult.Passed> passed, Action<TState> @else) Parameters state TState passed Action<TState, TestResult.Passed> else Action<TState> Type Parameters TState MatchPassed<TState, TMatchOutput>(TState, Func<TState, Passed, TMatchOutput>, Func<TState, TMatchOutput>) public override TMatchOutput MatchPassed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TMatchOutput> @else) Parameters state TState passed Func<TState, TestResult.Passed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput Match<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<Passed, TMatchOutput>, Func<Failed, TMatchOutput>) public override TMatchOutput Match<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TestResult.Passed, TMatchOutput> passed, Func<TestResult.Failed, TMatchOutput> failed) Parameters notRun Func<TestResult.NotRun, TMatchOutput> passed Func<TestResult.Passed, TMatchOutput> failed Func<TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput Match<TState>(TState, Action<TState, NotRun>, Action<TState, Passed>, Action<TState, Failed>) public override void Match<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState, TestResult.Passed> passed, Action<TState, TestResult.Failed> failed) Parameters state TState notRun Action<TState, TestResult.NotRun> passed Action<TState, TestResult.Passed> failed Action<TState, TestResult.Failed> Type Parameters TState Match<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, Passed, TMatchOutput>, Func<TState, Failed, TMatchOutput>) public override TMatchOutput Match<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TestResult.Failed, TMatchOutput> failed) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> passed Func<TState, TestResult.Passed, TMatchOutput> failed Func<TState, TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput UnwrapFailed() public override TestResult.Failed UnwrapFailed() Returns TestResult.Failed UnwrapNotRun() public override TestResult.NotRun UnwrapNotRun() Returns TestResult.NotRun UnwrapPassed() public override TestResult.Passed UnwrapPassed() Returns TestResult.Passed"
  },
  "api/TeaPie.Testing.TestResult.html": {
    "href": "api/TeaPie.Testing.TestResult.html",
    "title": "Class TestResult | TeaPie",
    "summary": "Class TestResult Namespace TeaPie.Testing Assembly TeaPie.dll [Union] public abstract record TestResult : IEquatable<TestResult> Inheritance object TestResult Implements IEquatable<TestResult> Derived TestResult.Failed TestResult.NotRun TestResult.Passed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Properties TestName public required string TestName { get; init; } Property Value string Methods Match(Action<NotRun>, Action<Passed>, Action<Failed>) public abstract void Match(Action<TestResult.NotRun> notRun, Action<TestResult.Passed> passed, Action<TestResult.Failed> failed) Parameters notRun Action<TestResult.NotRun> passed Action<TestResult.Passed> failed Action<TestResult.Failed> MatchFailed(Action<Failed>, Action) public abstract void MatchFailed(Action<TestResult.Failed> failed, Action @else) Parameters failed Action<TestResult.Failed> else Action MatchFailed<TMatchOutput>(Func<Failed, TMatchOutput>, Func<TMatchOutput>) public abstract TMatchOutput MatchFailed<TMatchOutput>(Func<TestResult.Failed, TMatchOutput> failed, Func<TMatchOutput> @else) Parameters failed Func<TestResult.Failed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchFailed<TState>(TState, Action<TState, Failed>, Action<TState>) public abstract void MatchFailed<TState>(TState state, Action<TState, TestResult.Failed> failed, Action<TState> @else) Parameters state TState failed Action<TState, TestResult.Failed> else Action<TState> Type Parameters TState MatchFailed<TState, TMatchOutput>(TState, Func<TState, Failed, TMatchOutput>, Func<TState, TMatchOutput>) public abstract TMatchOutput MatchFailed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Failed, TMatchOutput> failed, Func<TState, TMatchOutput> @else) Parameters state TState failed Func<TState, TestResult.Failed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchNotRun(Action<NotRun>, Action) public abstract void MatchNotRun(Action<TestResult.NotRun> notRun, Action @else) Parameters notRun Action<TestResult.NotRun> else Action MatchNotRun<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<TMatchOutput>) public abstract TMatchOutput MatchNotRun<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TMatchOutput> @else) Parameters notRun Func<TestResult.NotRun, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchNotRun<TState>(TState, Action<TState, NotRun>, Action<TState>) public abstract void MatchNotRun<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState> @else) Parameters state TState notRun Action<TState, TestResult.NotRun> else Action<TState> Type Parameters TState MatchNotRun<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, TMatchOutput>) public abstract TMatchOutput MatchNotRun<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TMatchOutput> @else) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput MatchPassed(Action<Passed>, Action) public abstract void MatchPassed(Action<TestResult.Passed> passed, Action @else) Parameters passed Action<TestResult.Passed> else Action MatchPassed<TMatchOutput>(Func<Passed, TMatchOutput>, Func<TMatchOutput>) public abstract TMatchOutput MatchPassed<TMatchOutput>(Func<TestResult.Passed, TMatchOutput> passed, Func<TMatchOutput> @else) Parameters passed Func<TestResult.Passed, TMatchOutput> else Func<TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput MatchPassed<TState>(TState, Action<TState, Passed>, Action<TState>) public abstract void MatchPassed<TState>(TState state, Action<TState, TestResult.Passed> passed, Action<TState> @else) Parameters state TState passed Action<TState, TestResult.Passed> else Action<TState> Type Parameters TState MatchPassed<TState, TMatchOutput>(TState, Func<TState, Passed, TMatchOutput>, Func<TState, TMatchOutput>) public abstract TMatchOutput MatchPassed<TState, TMatchOutput>(TState state, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TMatchOutput> @else) Parameters state TState passed Func<TState, TestResult.Passed, TMatchOutput> else Func<TState, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput Match<TMatchOutput>(Func<NotRun, TMatchOutput>, Func<Passed, TMatchOutput>, Func<Failed, TMatchOutput>) public abstract TMatchOutput Match<TMatchOutput>(Func<TestResult.NotRun, TMatchOutput> notRun, Func<TestResult.Passed, TMatchOutput> passed, Func<TestResult.Failed, TMatchOutput> failed) Parameters notRun Func<TestResult.NotRun, TMatchOutput> passed Func<TestResult.Passed, TMatchOutput> failed Func<TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TMatchOutput Match<TState>(TState, Action<TState, NotRun>, Action<TState, Passed>, Action<TState, Failed>) public abstract void Match<TState>(TState state, Action<TState, TestResult.NotRun> notRun, Action<TState, TestResult.Passed> passed, Action<TState, TestResult.Failed> failed) Parameters state TState notRun Action<TState, TestResult.NotRun> passed Action<TState, TestResult.Passed> failed Action<TState, TestResult.Failed> Type Parameters TState Match<TState, TMatchOutput>(TState, Func<TState, NotRun, TMatchOutput>, Func<TState, Passed, TMatchOutput>, Func<TState, Failed, TMatchOutput>) public abstract TMatchOutput Match<TState, TMatchOutput>(TState state, Func<TState, TestResult.NotRun, TMatchOutput> notRun, Func<TState, TestResult.Passed, TMatchOutput> passed, Func<TState, TestResult.Failed, TMatchOutput> failed) Parameters state TState notRun Func<TState, TestResult.NotRun, TMatchOutput> passed Func<TState, TestResult.Passed, TMatchOutput> failed Func<TState, TestResult.Failed, TMatchOutput> Returns TMatchOutput Type Parameters TState TMatchOutput UnwrapFailed() public abstract TestResult.Failed UnwrapFailed() Returns TestResult.Failed UnwrapNotRun() public abstract TestResult.NotRun UnwrapNotRun() Returns TestResult.NotRun UnwrapPassed() public abstract TestResult.Passed UnwrapPassed() Returns TestResult.Passed"
  },
  "api/TeaPie.Testing.TestResultMatchExtensions.html": {
    "href": "api/TeaPie.Testing.TestResultMatchExtensions.html",
    "title": "Class TestResultMatchExtensions | TeaPie",
    "summary": "Class TestResultMatchExtensions Namespace TeaPie.Testing Assembly TeaPie.dll public static class TestResultMatchExtensions Inheritance object TestResultMatchExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MatchAsync(Task<TestResult>, Action<NotRun>, Action<Passed>, Action<Failed>) public static Task MatchAsync(this Task<TestResult> unionTask, Action<TestResult.NotRun> notRun, Action<TestResult.Passed> passed, Action<TestResult.Failed> failed) Parameters unionTask Task<TestResult> notRun Action<TestResult.NotRun> passed Action<TestResult.Passed> failed Action<TestResult.Failed> Returns Task MatchAsync(ValueTask<TestResult>, Action<NotRun>, Action<Passed>, Action<Failed>) public static ValueTask MatchAsync(this ValueTask<TestResult> unionTask, Action<TestResult.NotRun> notRun, Action<TestResult.Passed> passed, Action<TestResult.Failed> failed) Parameters unionTask ValueTask<TestResult> notRun Action<TestResult.NotRun> passed Action<TestResult.Passed> failed Action<TestResult.Failed> Returns ValueTask MatchAsync<TMatchOutput>(Task<TestResult>, Func<NotRun, TMatchOutput>, Func<Passed, TMatchOutput>, Func<Failed, TMatchOutput>) public static Task<TMatchOutput> MatchAsync<TMatchOutput>(this Task<TestResult> unionTask, Func<TestResult.NotRun, TMatchOutput> notRun, Func<TestResult.Passed, TMatchOutput> passed, Func<TestResult.Failed, TMatchOutput> failed) Parameters unionTask Task<TestResult> notRun Func<TestResult.NotRun, TMatchOutput> passed Func<TestResult.Passed, TMatchOutput> failed Func<TestResult.Failed, TMatchOutput> Returns Task<TMatchOutput> Type Parameters TMatchOutput MatchAsync<TMatchOutput>(ValueTask<TestResult>, Func<NotRun, TMatchOutput>, Func<Passed, TMatchOutput>, Func<Failed, TMatchOutput>) public static ValueTask<TMatchOutput> MatchAsync<TMatchOutput>(this ValueTask<TestResult> unionTask, Func<TestResult.NotRun, TMatchOutput> notRun, Func<TestResult.Passed, TMatchOutput> passed, Func<TestResult.Failed, TMatchOutput> failed) Parameters unionTask ValueTask<TestResult> notRun Func<TestResult.NotRun, TMatchOutput> passed Func<TestResult.Passed, TMatchOutput> failed Func<TestResult.Failed, TMatchOutput> Returns ValueTask<TMatchOutput> Type Parameters TMatchOutput MatchFailedAsync(Task<TestResult>, Action<Failed>, Action) public static Task MatchFailedAsync(this Task<TestResult> unionTask, Action<TestResult.Failed> failed, Action @else) Parameters unionTask Task<TestResult> failed Action<TestResult.Failed> else Action Returns Task MatchFailedAsync(ValueTask<TestResult>, Action<Failed>, Action) public static ValueTask MatchFailedAsync(this ValueTask<TestResult> unionTask, Action<TestResult.Failed> failed, Action @else) Parameters unionTask ValueTask<TestResult> failed Action<TestResult.Failed> else Action Returns ValueTask MatchFailedAsync<TMatchOutput>(Task<TestResult>, Func<Failed, TMatchOutput>, Func<TMatchOutput>) public static Task<TMatchOutput> MatchFailedAsync<TMatchOutput>(this Task<TestResult> unionTask, Func<TestResult.Failed, TMatchOutput> failed, Func<TMatchOutput> @else) Parameters unionTask Task<TestResult> failed Func<TestResult.Failed, TMatchOutput> else Func<TMatchOutput> Returns Task<TMatchOutput> Type Parameters TMatchOutput MatchFailedAsync<TMatchOutput>(ValueTask<TestResult>, Func<Failed, TMatchOutput>, Func<TMatchOutput>) public static ValueTask<TMatchOutput> MatchFailedAsync<TMatchOutput>(this ValueTask<TestResult> unionTask, Func<TestResult.Failed, TMatchOutput> failed, Func<TMatchOutput> @else) Parameters unionTask ValueTask<TestResult> failed Func<TestResult.Failed, TMatchOutput> else Func<TMatchOutput> Returns ValueTask<TMatchOutput> Type Parameters TMatchOutput MatchNotRunAsync(Task<TestResult>, Action<NotRun>, Action) public static Task MatchNotRunAsync(this Task<TestResult> unionTask, Action<TestResult.NotRun> notRun, Action @else) Parameters unionTask Task<TestResult> notRun Action<TestResult.NotRun> else Action Returns Task MatchNotRunAsync(ValueTask<TestResult>, Action<NotRun>, Action) public static ValueTask MatchNotRunAsync(this ValueTask<TestResult> unionTask, Action<TestResult.NotRun> notRun, Action @else) Parameters unionTask ValueTask<TestResult> notRun Action<TestResult.NotRun> else Action Returns ValueTask MatchNotRunAsync<TMatchOutput>(Task<TestResult>, Func<NotRun, TMatchOutput>, Func<TMatchOutput>) public static Task<TMatchOutput> MatchNotRunAsync<TMatchOutput>(this Task<TestResult> unionTask, Func<TestResult.NotRun, TMatchOutput> notRun, Func<TMatchOutput> @else) Parameters unionTask Task<TestResult> notRun Func<TestResult.NotRun, TMatchOutput> else Func<TMatchOutput> Returns Task<TMatchOutput> Type Parameters TMatchOutput MatchNotRunAsync<TMatchOutput>(ValueTask<TestResult>, Func<NotRun, TMatchOutput>, Func<TMatchOutput>) public static ValueTask<TMatchOutput> MatchNotRunAsync<TMatchOutput>(this ValueTask<TestResult> unionTask, Func<TestResult.NotRun, TMatchOutput> notRun, Func<TMatchOutput> @else) Parameters unionTask ValueTask<TestResult> notRun Func<TestResult.NotRun, TMatchOutput> else Func<TMatchOutput> Returns ValueTask<TMatchOutput> Type Parameters TMatchOutput MatchPassedAsync(Task<TestResult>, Action<Passed>, Action) public static Task MatchPassedAsync(this Task<TestResult> unionTask, Action<TestResult.Passed> passed, Action @else) Parameters unionTask Task<TestResult> passed Action<TestResult.Passed> else Action Returns Task MatchPassedAsync(ValueTask<TestResult>, Action<Passed>, Action) public static ValueTask MatchPassedAsync(this ValueTask<TestResult> unionTask, Action<TestResult.Passed> passed, Action @else) Parameters unionTask ValueTask<TestResult> passed Action<TestResult.Passed> else Action Returns ValueTask MatchPassedAsync<TMatchOutput>(Task<TestResult>, Func<Passed, TMatchOutput>, Func<TMatchOutput>) public static Task<TMatchOutput> MatchPassedAsync<TMatchOutput>(this Task<TestResult> unionTask, Func<TestResult.Passed, TMatchOutput> passed, Func<TMatchOutput> @else) Parameters unionTask Task<TestResult> passed Func<TestResult.Passed, TMatchOutput> else Func<TMatchOutput> Returns Task<TMatchOutput> Type Parameters TMatchOutput MatchPassedAsync<TMatchOutput>(ValueTask<TestResult>, Func<Passed, TMatchOutput>, Func<TMatchOutput>) public static ValueTask<TMatchOutput> MatchPassedAsync<TMatchOutput>(this ValueTask<TestResult> unionTask, Func<TestResult.Passed, TMatchOutput> passed, Func<TMatchOutput> @else) Parameters unionTask ValueTask<TestResult> passed Func<TestResult.Passed, TMatchOutput> else Func<TMatchOutput> Returns ValueTask<TMatchOutput> Type Parameters TMatchOutput"
  },
  "api/TeaPie.Testing.TestResultsSummary.html": {
    "href": "api/TeaPie.Testing.TestResultsSummary.html",
    "title": "Class TestResultsSummary | TeaPie",
    "summary": "Class TestResultsSummary Namespace TeaPie.Testing Assembly TeaPie.dll public class TestResultsSummary Inheritance object TestResultsSummary Derived CollectionTestResultsSummary TestCaseTestResultsSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Properties AllTestsPassed public bool AllTestsPassed { get; } Property Value bool FailedTests public IReadOnlyList<TestResult.Failed> FailedTests { get; } Property Value IReadOnlyList<TestResult.Failed> HasSkippedTests public bool HasSkippedTests { get; } Property Value bool NumberOfExecutedTests public int NumberOfExecutedTests { get; } Property Value int NumberOfFailedTests public int NumberOfFailedTests { get; } Property Value int NumberOfPassedTests public int NumberOfPassedTests { get; } Property Value int NumberOfSkippedTests public int NumberOfSkippedTests { get; } Property Value int NumberOfTests public int NumberOfTests { get; } Property Value int PassedTests public IReadOnlyList<TestResult.Passed> PassedTests { get; } Property Value IReadOnlyList<TestResult.Passed> PercentageOfFailedTests public double PercentageOfFailedTests { get; } Property Value double PercentageOfPassedTests public double PercentageOfPassedTests { get; } Property Value double PercentageOfSkippedTests public double PercentageOfSkippedTests { get; } Property Value double SkippedTests public IReadOnlyList<TestResult.NotRun> SkippedTests { get; } Property Value IReadOnlyList<TestResult.NotRun> TestResults public IReadOnlyList<TestResult> TestResults { get; } Property Value IReadOnlyList<TestResult> TimeElapsedDuringTesting public double TimeElapsedDuringTesting { get; } Property Value double Timestamp public DateTime Timestamp { get; protected set; } Property Value DateTime"
  },
  "api/TeaPie.Testing.html": {
    "href": "api/TeaPie.Testing.html",
    "title": "Namespace TeaPie.Testing | TeaPie",
    "summary": "Namespace TeaPie.Testing Classes CollectionTestResultsSummary TeaPieTestingExtensions TestCaseTestResultsSummary TestDirectivePatternBuilder A builder for constructing regular expression patterns for test directives used in '.http' files. TestResult TestResult.Failed TestResult.NotRun TestResult.Passed TestResultMatchExtensions TestResultsSummary"
  },
  "api/TeaPie.Variables.IVariablesOperations.html": {
    "href": "api/TeaPie.Variables.IVariablesOperations.html",
    "title": "Interface IVariablesOperations | TeaPie",
    "summary": "Interface IVariablesOperations Namespace TeaPie.Variables Assembly TeaPie.dll public interface IVariablesOperations Extension Methods JsonExtensions.ToJsonString(object) Methods ContainsVariable(string) bool ContainsVariable(string name) Parameters name string Returns bool GetVariable<T>(string, T?) T? GetVariable<T>(string name, T? defaultValue = default) Parameters name string defaultValue T Returns T Type Parameters T RemoveVariable(string) bool RemoveVariable(string name) Parameters name string Returns bool RemoveVariablesWithTag(string) bool RemoveVariablesWithTag(string tag) Parameters tag string Returns bool SetVariable<T>(string, T, params string[]) void SetVariable<T>(string name, T value, params string[] tags) Parameters name string value T tags string[] Type Parameters T"
  },
  "api/TeaPie.Variables.TeaPieVariablesExtensions.html": {
    "href": "api/TeaPie.Variables.TeaPieVariablesExtensions.html",
    "title": "Class TeaPieVariablesExtensions | TeaPie",
    "summary": "Class TeaPieVariablesExtensions Namespace TeaPie.Variables Assembly TeaPie.dll public static class TeaPieVariablesExtensions Inheritance object TeaPieVariablesExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsVariable(TeaPie, string) Determines whether a variable with the specified name exists. public static bool ContainsVariable(this TeaPie teaPie, string name) Parameters teaPie TeaPie The current context instance. name string The name of the variable to check for existence. Returns bool true if a variable with the specified name exists; otherwise, false. RemoveVariable(TeaPie, string) Attempts to remove the variable(s) with the specified name from all levels (TestCaseVariables, CollectionVariables, EnvironmentVariables, GlobalVariables). public static bool RemoveVariable(this TeaPie teaPie, string name) Parameters teaPie TeaPie The current context instance. name string The name of the variable(s) to remove. Returns bool true if the variable(s) were successfully removed from all levels; otherwise, false. RemoveVariablesWithTag(TeaPie, string) Attempts to remove all variables tagged with the specified tag from all levels (TestCaseVariables, CollectionVariables, EnvironmentVariables, GlobalVariables). public static bool RemoveVariablesWithTag(this TeaPie teaPie, string tag) Parameters teaPie TeaPie The current context instance. tag string The tag used to identify variables for removal. Returns bool true if all variables with the specified tag were successfully removed from all levels; otherwise, false."
  },
  "api/TeaPie.Variables.Variable.html": {
    "href": "api/TeaPie.Variables.Variable.html",
    "title": "Class Variable | TeaPie",
    "summary": "Class Variable Namespace TeaPie.Variables Assembly TeaPie.dll public class Variable Inheritance object Variable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Constructors Variable(string, object?, params string[]) public Variable(string name, object? value, params string[] tags) Parameters name string value object tags string[] Properties Name public string Name { get; set; } Property Value string Methods GetValue<T>() public T? GetValue<T>() Returns T Type Parameters T"
  },
  "api/TeaPie.Variables.VariablesCollection.html": {
    "href": "api/TeaPie.Variables.VariablesCollection.html",
    "title": "Class VariablesCollection | TeaPie",
    "summary": "Class VariablesCollection Namespace TeaPie.Variables Assembly TeaPie.dll public class VariablesCollection : IEnumerable<Variable>, IEnumerable Inheritance object VariablesCollection Implements IEnumerable<Variable> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Properties Count public int Count { get; } Property Value int Methods Clear() public void Clear() Contains(string) public bool Contains(string variableName) Parameters variableName string Returns bool GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Variable> GetEnumerator() Returns IEnumerator<Variable> An enumerator that can be used to iterate through the collection. Get<T>(string, T?) Attempts to get variable with given name of T type. If no such variable is found, defaultValue is retrieved. public T? Get<T>(string name, T? defaultValue = default) Parameters name string Name of the variable. defaultValue T Value, that will be retrieved when no variable with given name of T type was found. Returns T Variable value or defaultValue if no variable with given name of T type was found. Type Parameters T Type of the variable. Remove(string) public bool Remove(string variableName) Parameters variableName string Returns bool RemoveVariablesWithTag(string) Attempts to remove all variables with given tag. If removal of any of them fails, false is retrieved. public bool RemoveVariablesWithTag(string tag) Parameters tag string Tag by which variables are going to be deleted. Returns bool Whether removal of all variables tagged with tag was successfull. If at least one removal failed, false is returned. Set<T>(string, T?, params string[]) public void Set<T>(string variableName, T? value, params string[] tags) Parameters variableName string value T tags string[] Type Parameters T"
  },
  "api/TeaPie.Variables.html": {
    "href": "api/TeaPie.Variables.html",
    "title": "Namespace TeaPie.Variables | TeaPie",
    "summary": "Namespace TeaPie.Variables Classes TeaPieVariablesExtensions Variable VariablesCollection Interfaces IVariablesOperations"
  },
  "api/TeaPie.Xml.JUnitXmlWriter.html": {
    "href": "api/TeaPie.Xml.JUnitXmlWriter.html",
    "title": "Class JUnitXmlWriter | TeaPie",
    "summary": "Class JUnitXmlWriter Namespace TeaPie.Xml Assembly TeaPie.dll public class JUnitXmlWriter : IDisposable Inheritance object JUnitXmlWriter Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods JsonExtensions.ToJsonString(object) Constructors JUnitXmlWriter(string) public JUnitXmlWriter(string filePath) Parameters filePath string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() EndTestSuite() public void EndTestSuite() EndTestSuitesRoot() public void EndTestSuitesRoot() WriteTestCase(string, string, double, bool, string?, string, string?) public void WriteTestCase(string className, string testName, double timeMs, bool skipped, string? failureMessage = null, string failureType = \"AssertionError\", string? stackTrace = null) Parameters className string testName string timeMs double skipped bool failureMessage string failureType string stackTrace string WriteTestSuite(string, int, int, int, double, DateTime?) public void WriteTestSuite(string name, int totalTests = 0, int skipped = 0, int failures = 0, double timeMs = 0, DateTime? timestamp = null) Parameters name string totalTests int skipped int failures int timeMs double timestamp DateTime? WriteTestSuitesRoot(string, int, int, int, double, DateTime?) public void WriteTestSuitesRoot(string name = \"\", int tests = 0, int skipped = 0, int failures = 0, double timeMs = 0, DateTime? timestamp = null) Parameters name string tests int skipped int failures int timeMs double timestamp DateTime?"
  },
  "api/TeaPie.Xml.html": {
    "href": "api/TeaPie.Xml.html",
    "title": "Namespace TeaPie.Xml | TeaPie",
    "summary": "Namespace TeaPie.Xml Classes JUnitXmlWriter"
  },
  "api/TeaPie.html": {
    "href": "api/TeaPie.html",
    "title": "Namespace TeaPie | TeaPie",
    "summary": "Namespace TeaPie Classes Application ApplicationBuilder PathExtensions TeaPie Interfaces IApplicationContext"
  },
  "docs/authentication.html": {
    "href": "docs/authentication.html",
    "title": "Authentication | TeaPie",
    "summary": "Authentication To provide maximum flexibility, an authentication interceptor is applied to all outgoing HTTP requests. The authentication provider to be used within interceptor can be specified in scripts or directly within request files. Available Authentication Providers Currently, TeaPie supports two authentication providers: None - No authentication is performed. This is the default behavior for all requests. OAuth2 - A commonly used authentication method, natively supported by the tool. To use OAuth2, it must be configured before executing requests: tp.ConfigureOAuth2Provider(OAuth2OptionsBuilder.Create() .WithAuthUrl(tp.GetVariable<string>(\"AuthServerUrl\")) // Required parameter. .WithGrantType(\"client_credentials\") // Required parameter. .WithClientId(\"test-client\") .WithClientSecret(\"test-secret\") .AddParameter(\"custom_parameter\", \"true\") // Add custom parameters if needed. .Build() ); Registering a Custom Authentication Provider To use a custom authentication provider, register it before usage: tp.RegisterAuthProvider( \"MyAuth\", new MyAuthProvider(tp.ApplicationContext) .ConfigureOptions(new MyAuthProviderOptions { AuthUrl = authUrl }) ); If the registered provider should also be the default, use this method instead: tp.RegisterDefaultAuthProvider( \"MyAuth\", new MyAuthProvider(tp.ApplicationContext) .ConfigureOptions(new MyAuthProviderOptions { AuthUrl = authUrl }) ); Setting a Default Authentication Provider To specify which registered authentication provider should be used for all requests, set it as the default: tp.SetDefaultAuthProvider(\"MyAuth\"); // Sets 'MyAuth' as the default authentication provider. For OAuth2 there is built-in method: tp.SetOAuth2AsDefaultAuthProvider(); If no authentication provider is explicitly set as default, requests will default to \"None\", meaning no authentication is applied. Using a Specific Authentication Provider for a Request Some requests may require a different authentication mechanism than the default. To assign a specific authentication provider for a request, use this directive in a .http file: ## AUTH-PROVIDER: MyAuth POST {{ApiBaseUrl}}{{ApiCarsSection}} Content-Type: application/json ... Disabling Authentication By default, no authentication is performed. However, if a default authentication provider is set, it applies to all requests. To disable authentication for a specific request, use the pre-defined authentication provider 'None': ## AUTH-PROVIDER: None POST {{ApiBaseUrl}}{{ApiCarsSection}} Content-Type: application/json ..."
  },
  "docs/collection.html": {
    "href": "docs/collection.html",
    "title": "Collection | TeaPie",
    "summary": "Collection Definition A directory in file system which contains at least on test case. Collection should encapsulate contextually similar test cases under one roof. Each collection can have inner collection. Purpose Groups test cases that are somewhat related. Example Usage Demo Collection Structure Collection is represented by directory, which contains at least one test case When running a collection, you can also reference optional files: Environment File – Defines environmental variables. Initialization Script – Runs before executing the test case. Running a Collection To execute a collection, run: teapie This will start collection run of the collection defined by current directory. If you want to execute collection located elsewhere, you can specify either relative or absolte path to collection directory: teapie [path-to-collection] To try it out, you can run a demo collection. Firstly, move to demo directory and then run just simply run the command. For advanced usage, here’s the full command specification: teapie test [path-to-collection] [--temp-path <path-to-temporary-folder>] [-d|--debug] [-v|--verbose] [-q|--quiet] [--log-level <minimal-log-level>] [--log-file <path-to-log-file>] [--log-file-log-level <minimal-log-level-for-log-file>] [-e|--env|--environment <environment-name>] [--env-file|--environment-file <path-to-environment-file>] [-r|--report-file <path-to-report-file>] [-i|--init-script|--initialization-script <path-to-initialization-script>] \uD83D\uDCA1 Tip: You can use the alias t or omit the command name entirely, since test is the default command when launching TeaPie. To view detailed information about each argument and option, run: teapie --help Exploring Collection Structure If you only want to inspect the collection structure without running its tests, you can do so with the following command: teapie explore [path-to-collection] [-d|--debug] [-v|--verbose] [-q|--quiet] [--log-level <minimal-log-level>] [--log-file <path-to-log-file>] [--log-file-log-level <minimal-log-level-for-log-file>] [--env-file|--environment-file <path-to-environment-file>] [-i|--init-script|--initialization-script <path-to-initialization-script>] \uD83D\uDCA1 Tip: You can use aliases exp or e to run the same command."
  },
  "docs/environments.html": {
    "href": "docs/environments.html",
    "title": "Environments | TeaPie",
    "summary": "Environments Environments are a crucial part of automating tests, allowing you to define variables for different scenarios. TeaPie supports environments to enhance flexibility and efficiency. Environment File To use environments, firstly you must define them in a JSON environment file. By default, the tool uses the first found file within collection (depth-first algorithm) with name <collection-name>-env.json, respectively first found file in the parent directory of provided test-case which follows <test-case-name>-env.json naming convention, when running single test-case. However, you can specify a custom environment file by using the following option: --env-file|--environment-file <path-to-environment-file> This is example, of how environment file can look like: { \"$shared\": { \"ApiBaseUrl\": \"http://my-car-rental-company.com\", \"ApiCustomersSection\": \"/customers\", \"ApiCarsSection\": \"/cars\", \"ApiCarRentalSection\": \"/rental\" }, \"local\": { \"ApiBaseUrl\": \"http://localhost:3001\", // Override $shared's variable \"DebugMode\": true // Environment-specific variable } } Each environment is defined by its name and set of variables. Default Environment ($shared) Each environment file should include a $shared environment, which serves as the default environment. Key points about $shared: Global Variables: Variables from $shared are always stored in tp.GlobalVariables. Environment Variables: Variables from $shared are added to tp.EnvironmentVariables only if $shared is selected as the active environment. Overwriting: Other environments can override variables defined in $shared. This approach was inspired by Rest Client for Visual Studio Code. Active Environment To specify the environment for running tests, use the -e option followed by the environment name: -e local You can also use aliases --env and --environment for the same purpose. There are some scenarios where you want to switch environments in the code (.csx scripts). There you can use: tp.SetEnvironment(\"local\");"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | TeaPie",
    "summary": "Getting Started Since TeaPie.Tool is not on NuGet store yet, the easiest way to launch this tool is: Move to the project folder: cd ./src/TeaPie.DotnetTool Run test of the demo collection: dotnet run test \"../../demo\" # this will run 'teapie test' command on demo collection Alternatively, you can run just single test case: dotnet run test \"../../demo/Tests/2. Cars/EditCar-req.http\" -i \"../../demo/init.csx\" --env-file \"../../demo-env.json\" You can learn more about how to use this tool either in Usage section or by checking attached demo."
  },
  "docs/initialization-script.html": {
    "href": "docs/initialization-script.html",
    "title": "Initialization Script | TeaPie",
    "summary": "Initialization Script Definition A .csx file that initializes essential components before a test case or collection run. Naming Convention init.csx (can be customized if explicitly specified) Purpose Sets up necessary configurations before executing (the first) test case. Example Usage Demo Initialization Script Specification Before executing (the first) test case, users can run an initialization script. This script is used for pre-test setup, including: Setting environment variables Defining reporters Configuring logging Other necessary pre-execution tasks By default, TeaPie automatically detects and executes the first init.csx script found in the collection or parent folder of the test case. Custom Initialization Script Users can specify a custom initialization script instead of the default by using the following option: -i | --init-script | --initialization-script <path-to-script>"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | TeaPie",
    "summary": "Introduction TeaPie is flexible CLI tool for API testing. The name comes from TEsting API Extension. Since, you will write tests faster, you can enjoy some tea \uD83C\uDF75 with pie \uD83C\uDF70 in mean-time. \uD83D\uDE09"
  },
  "docs/logging.html": {
    "href": "docs/logging.html",
    "title": "Logging | TeaPie",
    "summary": "Logging Logging is essential part of any application. The main logger is exposed as ILogger from Microsoft.Extensions.Logging and user can use it easily by accessing it via tp instance: tp.Logger.LogInformation(\"I understand logging in TeaPie! Yee!\"); By default, TeaPie uses Serilog as the logging provider. Users can adjust logging levels during application run by using these options: Debug Output (-d | --debug): Displays more detailed logging. Verbose Output (-v | --verbose): Displays the most detailed logging. Quiet Mode (-q | --quiet): Suppresses any output. Logging Options: --log-level - Sets the minimal log level for console output. --log-file - Specifies a path to save logs. --log-file-log-level - Sets the minimal log level for the log file."
  },
  "docs/reporting.html": {
    "href": "docs/reporting.html",
    "title": "Reporting | TeaPie",
    "summary": "Reporting Console report At the end of a collection testing run, a summary report of test results is automatically displayed to console using Spectre.Console components. Here is an example: Reporting to File TeaPie includes a built-in JUnit XML file reporter, which can be enabled by adding the -r|--report-file option with a valid path to an .xml file where the report will be generated. This widely accepted format is supported natively by GitHub Actions and Microsoft Azure DevOps. However, it is not fully standardized, and different CI tools may use modified versions of this format. For more details, refer to this post. Since JUnit XML uses different terminology than TeaPie, here is the mapping: testsuites → Collection testsuite → Test Case testcase → Test Time is automatically converted to seconds (a common practice) with three decimal places, using dot notation. Custom Reporters The default console reporter, powered by AnsiConsole from Spectre.Console, provides all essential test results details. However, users can add custom reporters, either by defining them inline: tp.RegisterReporter((summary) => { if (summary.AllTestsPassed) { Console.WriteLine($\"Success! All {summary.NumberOfExecutedTests} tests passed.\"); } else { Console.WriteLine($\"Failure: {summary.PercentageOfFailedTests}% of tests failed.\"); } }); Or for more advanced and customizable reporting, by implementing a custom reporter class that implements the IReporter<TestsResultsSummary> interface: public class MyReporter : IReporter<TestsResultsSummary> { public void Report(TestsResultsSummary summary) { // Custom reporting logic... } } tp.RegisterReporter(new MyReporter()); All necessary information about results of tests can be found within TestResultSummary object. The summary contains properties with access to commonly evaluated statistics as AllTestsPassed, NumberOfFailedTests, PercentageOfSkippedTests, FailedTests, ..."
  },
  "docs/retrying.html": {
    "href": "docs/retrying.html",
    "title": "Retrying | TeaPie",
    "summary": "Retrying TeaPie allows users to register named retry strategies, which can be referenced later for request retrying. These strategies define how and when requests should be retried. The structure of the retry strategy is defined by the object RetryStrategyOptions<HttpResponseMessage> from Polly.Core library. Registering a Retry Strategy To create a reusable retry strategy, register it in a script: tp.RegisterRetryStrategy(\"Default retry\", new RetryStrategyOptions<HttpResponseMessage> { MaxRetryAttempts = 3, // Maximum number of retry attempts Delay = TimeSpan.FromMilliseconds(500), // Default delay between retries. BackoffType = DelayBackoffType.Exponential, // Defines how delay increases (e.g., Linear, Exponential) ShouldHandle = new PredicateBuilder<HttpResponseMessage>() .HandleResult(response => response.StatusCode == HttpStatusCode.InternalServerError) // Condition determining whether a request should be retried (Retry, when status code is 500). // More properties can be configured (see 'Polly.Core.Retry.RetryStrategyOptions<TResult>' for more information) }); Using Retry Directives in .http Files Within .http files, you can apply a retry strategy using retry directives. These directives allow fine-tuning of request retrying behavior. # @name GetCarRequest # Applying a named retry strategy and overriding specific properties. ## RETRY-STRATEGY: Default retry # Uses already registered \"Default retry\" strategy ## RETRY-MAX-ATTEMPTS: 5 # Overrides max retry attempts ## RETRY-BACKOFF-TYPE: Linear # Changes backoff strategy for this request ## RETRY-MAX-DELAY: 00:00:03 # Limits the maximum delay between retries ## RETRY-UNTIL-STATUS: [200, 201] # Adds condition - retry until one of given status codes is received GET {{ApiBaseUrl}}{{ApiCarsSection}}/{{RentCarRequest.request.body.$.CarId}} \uD83D\uDC81‍♂️ These modifications apply only to the current request and do not alter the registered retry strategy. If no retry strategy is selected, default one (from Polly.Core) is taken and modified accordingly. Using retry strategies ensures more resilient test execution, handling temporary failures gracefully while preventing unnecessary retries."
  },
  "docs/running-tests.html": {
    "href": "docs/running-tests.html",
    "title": "Running Tests | TeaPie",
    "summary": "Running Tests After generating test cases and writing your tests, you can execute the main command for testing: teapie TeaPie supports two execution modes: Collection Run - If a directory path is provided, tool runs all test-cases found in the specified folder and its subfolders. Single Test-Case Run - If a .http file path is provided, then tool executes only that specific test-case. For more advanced usage, here’s the full command specification: teapie test [path-to-collection-or-test-case] [--temp-path <path-to-temporary-folder>] [-d|--debug] [-v|--verbose] [-q|--quiet] [--log-level <minimal-log-level>] [--log-file <path-to-log-file>] [--log-file-log-level <minimal-log-level-for-log-file>] [-e|--env|--environment <environment-name>] [--env-file|--environment-file <path-to-environment-file>] [-r|--report-file <path-to-report-file>] [-i|--init-script|--initialization-script <path-to-initialization-script>] \uD83D\uDC81‍♂️ You can use alias t or completely omit command name, since test command is considered as default command when launching teapie. To view detailed information about each argument and option, run: teapie --help Both single test-case and collection runs follow these two main steps: Structure Exploration – TeaPie scans the directory or test-case structure to identify all test cases and related files. Test Execution – Each detected test is executed based on the provided configuration."
  },
  "docs/test-case/post-response-script.html": {
    "href": "docs/test-case/post-response-script.html",
    "title": "Post-Response Script | TeaPie",
    "summary": "Post-Response Script Definition .csx script to be executed after all HTTP requests within test case. Naming Convention <test-case-name>-test.csx Purpose Testing given response(s) and tear-down of data. Example Usage Simple Script, Manipulation with Body, Another Example, Advanced Script Features Testing The post-response script is used to define tests. A test is considered failed if an exception is thrown within the test body, following standard testing framework practices. This approach allows you to use any assertion library referenced via NuGet. \uD83D\uDC81‍♂️ However, the natively supported assertion library is Xunit.Assert, which is statically imported in all script files. This means you don't need the Assert. prefix to access its methods. Example Test tp.Test(\"Status code should be 201.\", () => { var statusCode = tp.Response.StatusCode(); Equal(201, statusCode); }); Accessing Requests and Responses For single requests or the most recently executed request, use tp.Request and tp.Response. For multiple requests in a .http file, use tp.Requests and tp.Responses to access named requests and responses. Skipping Tests During development or debugging, you may need to skip certain tests. To do this, set the optional skipTest parameter to true: tp.Test(\"Status code should be 201.\", () => { var statusCode = tp.Responses[\"CreateCarRequest\"].StatusCode(); Equal(201, statusCode); }, true); // Skip this test Asynchronous Tests Asynchronous tests are also fully supported: await tp.Test($\"Newly added car should have '{brand}' brand.\", async () => { var body = tp.GetVariable<string>(\"NewCar\"); dynamic obj = body.ToExpando(); dynamic responseJson = await tp.Responses[\"GetNewCarRequest\"].GetBodyAsExpandoAsync(); Equal(obj.Brand, responseJson.brand); }); Working with Body Content Both HttpRequestMessage and HttpResponseMessage objects include convenient methods for handling body content: GetBody() / GetBodyAsync() - Retrieves the body as a string. GetBody<TResult>() / GetBodyAsync<TResult>() - Deserializes the JSON body into an object of type TResult. GetBodyAsExpando() / GetBodyAsExpandoAsync() - Retrieves the body as a case-insensitive dynamic expando object, making property access easier. IMPORTANT: To use an expando object correctly, explicitly declare containing variable as dynamic. Status Code Handling The response object includes a StatusCode() method that simplifies status code handling by returning its integer value. JSON Handling For requests that handle application/json payloads, a extension method ToExpando() can simplify access to JSON properties: // Using case-insensitive expando object tp.Test(\"Identifier should be a positive integer.\", () => { // Expando object has to be marked epxlicitly as 'dynamic' dynamic responseBody = tp.Response.GetBody().ToExpando(); True(responseBody.id > 0); }); This makes working with JSON responses straightforward and efficient."
  },
  "docs/test-case/pre-request-script.html": {
    "href": "docs/test-case/pre-request-script.html",
    "title": "Pre-request Script | TeaPie",
    "summary": "Pre-request Script Definition The first .csx script executed within a test case. Naming Convention <test-case-name>-init.csx Purpose Initialization of data and variables before executing any HTTP request. Example Usage Demo Pre-Request Script Features Variables You can access the test runner context using the globally available tp identifier for various purposes. One of them is variables setting/getting: tp.SetVariable(\"TimeOfExecution\", DateTime.UtcNow); ... var time = tp.GetVariable(\"TimeOfExecution\"); Directives Load Directive #load directive for referencing another scripts You can provide either an absolute or a relative path. IMPORTANT: Referenced script is automatically executed. For this reason, rather encapsulate logic in methods, to prevent unwanted execution. #load \"path\\to\\your\\script.csx\" \uD83D\uDC81‍♂️ When using relative paths, the parent folder of the current script serves as the starting point. NuGet Directive #nuget directive to install NuGet packages: #nuget \"AutoBogus, 2.13.1\" \uD83D\uDC81‍♂️ Even though NuGet packages are installed globally across all scripts, you must use the using directive to access them in your scripts."
  },
  "docs/test-case/request-file.html": {
    "href": "docs/test-case/request-file.html",
    "title": "Request File | TeaPie",
    "summary": "Request File Definition An .http file which contains definition of (multiple) HTTP request(s). Naming Convention <test-case-name>-req.http Purpose Definition of HTTP requests which will be executed within test case. Example Usage Single Request, Multiple (Named) Requests, Advanced Request File with Directives, Request File with Retry Directives Features A request file can contain one or more HTTP requests. To separate requests, use the ### comment line between two requests. Named Request You can also name your requests for easier management by adding a metadata line just before request definition: # @name RequestName GET https:/localhost:3001/customers Content-Type: application/json { \"Id\": 3, \"FirstName\": \"Alice\", \"LastName\": \"Johnson\", \"Email\": \"alice.johnson@example.com\" } Variables All variables can be used in the request file with the {{variableName}} notation. \uD83D\uDC81‍♂️ When you want to use reference types for variables, make sure that they override ToString() method. During variable resolution, ToString() will be called on them. For named requests, you can access request and response data using the following syntax: {{requestName.(request|response).(body|headers).(*|JPath|XPath)}} # Example that will fetch 'Id' property from 'AddNewCarRequest' request's JSON body {{AddNewCarRequest.request.body.$.Id}} This gives you comprehensive access to headers and body content of named requests."
  },
  "docs/test-case/test-case.html": {
    "href": "docs/test-case/test-case.html",
    "title": "Test Case | TeaPie",
    "summary": "Test Case Definition The fundamental unit representing a single test scenario that can be executed independently. It consists of a .http file and optional supporting scripts that define setup, execution, and validation of API tests. Test cases can be grouped into a collection. Purpose Encapsulates a single test scenario (not only) for isolated execution. Example Usage Request File of a Complete Test Case Structure Request File Each test case is represented by a .http file, referred to as the Request File. It must contain at least one HTTP request, following these conventions. Optional Scripts For more complex test cases, these additional scripts can be included: Pre-Request Script – A .csx script for data setup and initialization before executing HTTP requests. Post-Response Script – A .csx script for validating API responses and performing assertions - testing. Additional Optional Files When running a test case, you can also reference: Environment File – Defines environmental variables. Initialization Script – Runs before executing the test case. Running a Test Case To execute a test case, run: teapie <path-to-request-file> To try it out, you can run a test case from the demo collection. The following test case is a good example as it demonstrates multiple features: teapie \"./Tests/2. Cars/EditCar-req.http\" --env-file \"../../demo-env.json\" -i \"../../init.csx\" For advanced usage, here’s the full command specification: teapie test <path-to-test-case> [--temp-path <path-to-temporary-folder>] [-d|--debug] [-v|--verbose] [-q|--quiet] [--log-level <minimal-log-level>] [--log-file <path-to-log-file>] [--log-file-log-level <minimal-log-level-for-log-file>] [-e|--env|--environment <environment-name>] [--env-file|--environment-file <path-to-environment-file>] [-r|--report-file <path-to-report-file>] [-i|--init-script|--initialization-script <path-to-initialization-script>] \uD83D\uDCA1 Tip: You can use the alias t or omit the command name entirely, since test is the default command when launching TeaPie. To view detailed information about each argument and option, run: teapie --help Scaffolding To create a new test case, use: teapie generate <test-case-name> [path] [-i|--init|--pre-request] [-t|--test|--post-response] \uD83D\uDCA1 Shortcut: You can use aliases gen or g instead of generate. This command generates the following files in the specified path (or the current directory if no path is provided): Pre-Request Script: <test-case-name>-init.csx Request File: <test-case-name>-req.http Post-Response Script: <test-case-name>-test.csx To disable pre-request or post-response script generation, set the -i and -t options to false. Exploring Test Case Structure To inspect the structure of a test case without executing it, run: teapie explore <path-to-request-file> [-d|--debug] [-v|--verbose] [-q|--quiet] [--log-level <minimal-log-level>] [--log-file <path-to-log-file>] [--log-file-log-level <minimal-log-level-for-log-file>] [--env-file|--environment-file <path-to-environment-file>] [-i|--init-script|--initialization-script <path-to-initialization-script>] \uD83D\uDCA1 Shortcut: You can use aliases exp or e instead of explore."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome | TeaPie",
    "summary": "Welcome This is official web-site of TeaPie - flexible CLI tool for API testing. The name comes from TEsting API Extension. Since, you will write tests faster, you can enjoy some tea \uD83C\uDF75 with pie \uD83C\uDF70 in mean-time. \uD83D\uDE09 To learn more about the tool, visit: Documentation for User API Documentation"
  }
}