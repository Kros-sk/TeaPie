### YamlMime:ManagedReference
items:
- uid: TeaPie.Http.HttpMessagesExtensions
  commentId: T:TeaPie.Http.HttpMessagesExtensions
  id: HttpMessagesExtensions
  parent: TeaPie.Http
  children:
  - TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpRequestMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpResponseMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpRequestMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpResponseMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpRequestMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpResponseMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpRequestMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpResponseMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsync``1(System.Net.Http.HttpRequestMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBodyAsync``1(System.Net.Http.HttpResponseMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBody``1(System.Net.Http.HttpRequestMessage)
  - TeaPie.Http.HttpMessagesExtensions.GetBody``1(System.Net.Http.HttpResponseMessage)
  - TeaPie.Http.HttpMessagesExtensions.StatusCode(System.Net.Http.HttpResponseMessage)
  langs:
  - csharp
  - vb
  name: HttpMessagesExtensions
  nameWithType: HttpMessagesExtensions
  fullName: TeaPie.Http.HttpMessagesExtensions
  type: Class
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: HttpMessagesExtensions
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 5
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  syntax:
    content: public static class HttpMessagesExtensions
    content.vb: Public Module HttpMessagesExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpRequestMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpRequestMessage)
  id: GetBody(System.Net.Http.HttpRequestMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBody(HttpRequestMessage)
  nameWithType: HttpMessagesExtensions.GetBody(HttpRequestMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBody
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 14
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: Gets the body content as a <xref href="System.String" data-throw-if-not-resolved="false"></xref> from the specified <code class="paramref">request</code>.
  example: []
  syntax:
    content: public static string GetBody(this HttpRequestMessage request)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to extract the body content from.
    return:
      type: System.String
      description: >-
        The body content as a <xref href="System.String" data-throw-if-not-resolved="false"></xref>. Returns an <b>empty string</b> if the content is
            <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Shared Function GetBody(request As HttpRequestMessage) As String
  overload: TeaPie.Http.HttpMessagesExtensions.GetBody*
- uid: TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpResponseMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpResponseMessage)
  id: GetBody(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBody(HttpResponseMessage)
  nameWithType: HttpMessagesExtensions.GetBody(HttpResponseMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBody(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBody
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 23
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: Gets the body content as a <xref href="System.String" data-throw-if-not-resolved="false"></xref> from the specified <code class="paramref">response</code>.
  example: []
  syntax:
    content: public static string GetBody(this HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response message to extract the body content from.
    return:
      type: System.String
      description: >-
        The body content as a <xref href="System.String" data-throw-if-not-resolved="false"></xref>. Returns an <b>empty string</b> if the content is
            <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Shared Function GetBody(response As HttpResponseMessage) As String
  overload: TeaPie.Http.HttpMessagesExtensions.GetBody*
- uid: TeaPie.Http.HttpMessagesExtensions.GetBody``1(System.Net.Http.HttpRequestMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBody``1(System.Net.Http.HttpRequestMessage)
  id: GetBody``1(System.Net.Http.HttpRequestMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBody<TResult>(HttpRequestMessage)
  nameWithType: HttpMessagesExtensions.GetBody<TResult>(HttpRequestMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBody<TResult>(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBody
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 33
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Gets the body content as a <code class="typeparamref">TResult</code> from the specified <code class="paramref">request</code>.

    This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static TResult? GetBody<TResult>(this HttpRequestMessage request)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to extract the body content from.
    typeParameters:
    - id: TResult
      description: Type which JSON body content will be deserialized to.
    return:
      type: '{TResult}'
      description: The body content as a <code class="typeparamref">TResult</code>.
    content.vb: Public Shared Function GetBody(Of TResult)(request As HttpRequestMessage) As TResult
  overload: TeaPie.Http.HttpMessagesExtensions.GetBody*
  nameWithType.vb: HttpMessagesExtensions.GetBody(Of TResult)(HttpRequestMessage)
  fullName.vb: TeaPie.Http.HttpMessagesExtensions.GetBody(Of TResult)(System.Net.Http.HttpRequestMessage)
  name.vb: GetBody(Of TResult)(HttpRequestMessage)
- uid: TeaPie.Http.HttpMessagesExtensions.GetBody``1(System.Net.Http.HttpResponseMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBody``1(System.Net.Http.HttpResponseMessage)
  id: GetBody``1(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBody<TResult>(HttpResponseMessage)
  nameWithType: HttpMessagesExtensions.GetBody<TResult>(HttpResponseMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBody<TResult>(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBody
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 43
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Gets the body content as a <code class="typeparamref">TResult</code> from the specified <code class="paramref">response</code>.

    This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static TResult? GetBody<TResult>(this HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response message to extract the body content from.
    typeParameters:
    - id: TResult
      description: Type which JSON body content will be deserialized to.
    return:
      type: '{TResult}'
      description: The body content as a <code class="typeparamref">TResult</code>.
    content.vb: Public Shared Function GetBody(Of TResult)(response As HttpResponseMessage) As TResult
  overload: TeaPie.Http.HttpMessagesExtensions.GetBody*
  nameWithType.vb: HttpMessagesExtensions.GetBody(Of TResult)(HttpResponseMessage)
  fullName.vb: TeaPie.Http.HttpMessagesExtensions.GetBody(Of TResult)(System.Net.Http.HttpResponseMessage)
  name.vb: GetBody(Of TResult)(HttpResponseMessage)
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpRequestMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpRequestMessage)
  id: GetBodyAsExpando(System.Net.Http.HttpRequestMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsExpando(HttpRequestMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsExpando(HttpRequestMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsExpando
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 52
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Gets the body content as a <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref> from the specified <code class="paramref">request</code>.

    This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static CaseInsensitiveExpandoObject GetBodyAsExpando(this HttpRequestMessage request)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to extract the body content from.
    return:
      type: TeaPie.Json.CaseInsensitiveExpandoObject
      description: The body content as a <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetBodyAsExpando(request As HttpRequestMessage) As CaseInsensitiveExpandoObject
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando*
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpResponseMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpResponseMessage)
  id: GetBodyAsExpando(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsExpando(HttpResponseMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsExpando(HttpResponseMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsExpando
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 61
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Gets the body content as a <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref> from the specified <code class="paramref">response</code>.

    This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static CaseInsensitiveExpandoObject GetBodyAsExpando(this HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response message to extract the body content from.
    return:
      type: TeaPie.Json.CaseInsensitiveExpandoObject
      description: The body content as a <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetBodyAsExpando(response As HttpResponseMessage) As CaseInsensitiveExpandoObject
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando*
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpRequestMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpRequestMessage)
  id: GetBodyAsync(System.Net.Http.HttpRequestMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsync(HttpRequestMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsync(HttpRequestMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsync
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 72
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: Asynchronously gets the body content as a <xref href="System.String" data-throw-if-not-resolved="false"></xref> from the specified <code class="paramref">request</code>.
  example: []
  syntax:
    content: public static Task<string> GetBodyAsync(this HttpRequestMessage request)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to extract the body content from.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation. The result is the body content as a
            <xref href="System.String" data-throw-if-not-resolved="false"></xref>. Returns an <b>empty string</b> if the content is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Shared Function GetBodyAsync(request As HttpRequestMessage) As Task(Of String)
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync*
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpResponseMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpResponseMessage)
  id: GetBodyAsync(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsync(HttpResponseMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsync(HttpResponseMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsync
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 81
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: Asynchronously gets the body content as a <xref href="System.String" data-throw-if-not-resolved="false"></xref> from the specified <code class="paramref">response</code>.
  example: []
  syntax:
    content: public static Task<string> GetBodyAsync(this HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response message to extract the body content from.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation. The result is the body content as a
            <xref href="System.String" data-throw-if-not-resolved="false"></xref>. Returns an <b>empty string</b> if the content is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Shared Function GetBodyAsync(response As HttpResponseMessage) As Task(Of String)
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync*
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync``1(System.Net.Http.HttpRequestMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsync``1(System.Net.Http.HttpRequestMessage)
  id: GetBodyAsync``1(System.Net.Http.HttpRequestMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsync<TResult>(HttpRequestMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsync<TResult>(HttpRequestMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync<TResult>(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsync
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 92
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Asynchronously gets the body content as a <code class="typeparamref">TResult</code> from the specified <code class="paramref">request</code>.

    This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static Task<TResult?> GetBodyAsync<TResult>(this HttpRequestMessage request)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to extract the body content from.
    typeParameters:
    - id: TResult
      description: Type which JSON body content will be deserialized to.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation. The result is the body content as a
            <code class="typeparamref">TResult</code>.
    content.vb: Public Shared Function GetBodyAsync(Of TResult)(request As HttpRequestMessage) As Task(Of TResult)
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync*
  nameWithType.vb: HttpMessagesExtensions.GetBodyAsync(Of TResult)(HttpRequestMessage)
  fullName.vb: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(Of TResult)(System.Net.Http.HttpRequestMessage)
  name.vb: GetBodyAsync(Of TResult)(HttpRequestMessage)
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync``1(System.Net.Http.HttpResponseMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsync``1(System.Net.Http.HttpResponseMessage)
  id: GetBodyAsync``1(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsync<TResult>(HttpResponseMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsync<TResult>(HttpResponseMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync<TResult>(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsync
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 103
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Asynchronously gets the body content as a <code class="typeparamref">TResult</code> from the specified <code class="paramref">response</code>.

    This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static Task<TResult?> GetBodyAsync<TResult>(this HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response message to extract the body content from.
    typeParameters:
    - id: TResult
      description: Type which JSON body content will be deserialized to.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation. The result is the body content as a
            <code class="typeparamref">TResult</code>.
    content.vb: Public Shared Function GetBodyAsync(Of TResult)(response As HttpResponseMessage) As Task(Of TResult)
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync*
  nameWithType.vb: HttpMessagesExtensions.GetBodyAsync(Of TResult)(HttpResponseMessage)
  fullName.vb: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync(Of TResult)(System.Net.Http.HttpResponseMessage)
  name.vb: GetBodyAsync(Of TResult)(HttpResponseMessage)
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpRequestMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpRequestMessage)
  id: GetBodyAsExpandoAsync(System.Net.Http.HttpRequestMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsExpandoAsync(HttpRequestMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsExpandoAsync(HttpRequestMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsExpandoAsync
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 113
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Asynchronously gets the body content as a <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref>

    from the specified <code class="paramref">request</code>. This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static Task<CaseInsensitiveExpandoObject> GetBodyAsExpandoAsync(this HttpRequestMessage request)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to extract the body content from.
    return:
      type: System.Threading.Tasks.Task{TeaPie.Json.CaseInsensitiveExpandoObject}
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation. The result is the body content as a
            <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetBodyAsExpandoAsync(request As HttpRequestMessage) As Task(Of CaseInsensitiveExpandoObject)
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync*
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpResponseMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpResponseMessage)
  id: GetBodyAsExpandoAsync(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: GetBodyAsExpandoAsync(HttpResponseMessage)
  nameWithType: HttpMessagesExtensions.GetBodyAsExpandoAsync(HttpResponseMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: GetBodyAsExpandoAsync
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 123
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: >-
    Asynchronously gets the body content as a <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref>

    from the specified <code class="paramref">response</code>. This is possible only if the body content is in JSON structure.
  example: []
  syntax:
    content: public static Task<CaseInsensitiveExpandoObject> GetBodyAsExpandoAsync(this HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response message to extract the body content from.
    return:
      type: System.Threading.Tasks.Task{TeaPie.Json.CaseInsensitiveExpandoObject}
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation. The result is the body content as a
            <xref href="TeaPie.Json.CaseInsensitiveExpandoObject" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetBodyAsExpandoAsync(response As HttpResponseMessage) As Task(Of CaseInsensitiveExpandoObject)
  overload: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync*
- uid: TeaPie.Http.HttpMessagesExtensions.StatusCode(System.Net.Http.HttpResponseMessage)
  commentId: M:TeaPie.Http.HttpMessagesExtensions.StatusCode(System.Net.Http.HttpResponseMessage)
  id: StatusCode(System.Net.Http.HttpResponseMessage)
  isExtensionMethod: true
  parent: TeaPie.Http.HttpMessagesExtensions
  langs:
  - csharp
  - vb
  name: StatusCode(HttpResponseMessage)
  nameWithType: HttpMessagesExtensions.StatusCode(HttpResponseMessage)
  fullName: TeaPie.Http.HttpMessagesExtensions.StatusCode(System.Net.Http.HttpResponseMessage)
  type: Method
  source:
    remote:
      path: src/TeaPie/Http/HttpMessagesExtensions.cs
      branch: testCaseRun
      repo: https://github.com/Kros-sk/TeaPie.git
    id: StatusCode
    path: ../src/TeaPie/Http/HttpMessagesExtensions.cs
    startLine: 135
  assemblies:
  - TeaPie
  namespace: TeaPie.Http
  summary: Gets the status code as an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> from the specified <code class="paramref">response</code>.
  example: []
  syntax:
    content: public static int StatusCode(this HttpResponseMessage response)
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response to extract the status code from.
    return:
      type: System.Int32
      description: The status code as an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function StatusCode(response As HttpResponseMessage) As Integer
  overload: TeaPie.Http.HttpMessagesExtensions.StatusCode*
references:
- uid: TeaPie.Http
  commentId: N:TeaPie.Http
  href: TeaPie.html
  name: TeaPie.Http
  nameWithType: TeaPie.Http
  fullName: TeaPie.Http
  spec.csharp:
  - uid: TeaPie
    name: TeaPie
    href: TeaPie.html
  - name: .
  - uid: TeaPie.Http
    name: Http
    href: TeaPie.Http.html
  spec.vb:
  - uid: TeaPie
    name: TeaPie
    href: TeaPie.html
  - name: .
  - uid: TeaPie.Http
    name: Http
    href: TeaPie.Http.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TeaPie.Http.HttpMessagesExtensions.GetBody*
  commentId: Overload:TeaPie.Http.HttpMessagesExtensions.GetBody
  href: TeaPie.Http.HttpMessagesExtensions.html#TeaPie_Http_HttpMessagesExtensions_GetBody_System_Net_Http_HttpRequestMessage_
  name: GetBody
  nameWithType: HttpMessagesExtensions.GetBody
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBody
- uid: System.Net.Http.HttpRequestMessage
  commentId: T:System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.httprequestmessage
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
- uid: System.Net.Http.HttpResponseMessage
  commentId: T:System.Net.Http.HttpResponseMessage
  parent: System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.httpresponsemessage
  name: HttpResponseMessage
  nameWithType: HttpResponseMessage
  fullName: System.Net.Http.HttpResponseMessage
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TeaPie.Json.CaseInsensitiveExpandoObject
  commentId: T:TeaPie.Json.CaseInsensitiveExpandoObject
  parent: TeaPie.Json
  href: TeaPie.Json.CaseInsensitiveExpandoObject.html
  name: CaseInsensitiveExpandoObject
  nameWithType: CaseInsensitiveExpandoObject
  fullName: TeaPie.Json.CaseInsensitiveExpandoObject
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando*
  commentId: Overload:TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando
  href: TeaPie.Http.HttpMessagesExtensions.html#TeaPie_Http_HttpMessagesExtensions_GetBodyAsExpando_System_Net_Http_HttpRequestMessage_
  name: GetBodyAsExpando
  nameWithType: HttpMessagesExtensions.GetBodyAsExpando
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpando
- uid: TeaPie.Json
  commentId: N:TeaPie.Json
  href: TeaPie.html
  name: TeaPie.Json
  nameWithType: TeaPie.Json
  fullName: TeaPie.Json
  spec.csharp:
  - uid: TeaPie
    name: TeaPie
    href: TeaPie.html
  - name: .
  - uid: TeaPie.Json
    name: Json
    href: TeaPie.Json.html
  spec.vb:
  - uid: TeaPie
    name: TeaPie
    href: TeaPie.html
  - name: .
  - uid: TeaPie.Json
    name: Json
    href: TeaPie.Json.html
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync*
  commentId: Overload:TeaPie.Http.HttpMessagesExtensions.GetBodyAsync
  href: TeaPie.Http.HttpMessagesExtensions.html#TeaPie_Http_HttpMessagesExtensions_GetBodyAsync_System_Net_Http_HttpRequestMessage_
  name: GetBodyAsync
  nameWithType: HttpMessagesExtensions.GetBodyAsync
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync*
  commentId: Overload:TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync
  href: TeaPie.Http.HttpMessagesExtensions.html#TeaPie_Http_HttpMessagesExtensions_GetBodyAsExpandoAsync_System_Net_Http_HttpRequestMessage_
  name: GetBodyAsExpandoAsync
  nameWithType: HttpMessagesExtensions.GetBodyAsExpandoAsync
  fullName: TeaPie.Http.HttpMessagesExtensions.GetBodyAsExpandoAsync
- uid: System.Threading.Tasks.Task{TeaPie.Json.CaseInsensitiveExpandoObject}
  commentId: T:System.Threading.Tasks.Task{TeaPie.Json.CaseInsensitiveExpandoObject}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<CaseInsensitiveExpandoObject>
  nameWithType: Task<CaseInsensitiveExpandoObject>
  fullName: System.Threading.Tasks.Task<TeaPie.Json.CaseInsensitiveExpandoObject>
  nameWithType.vb: Task(Of CaseInsensitiveExpandoObject)
  fullName.vb: System.Threading.Tasks.Task(Of TeaPie.Json.CaseInsensitiveExpandoObject)
  name.vb: Task(Of CaseInsensitiveExpandoObject)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: TeaPie.Json.CaseInsensitiveExpandoObject
    name: CaseInsensitiveExpandoObject
    href: TeaPie.Json.CaseInsensitiveExpandoObject.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: TeaPie.Json.CaseInsensitiveExpandoObject
    name: CaseInsensitiveExpandoObject
    href: TeaPie.Json.CaseInsensitiveExpandoObject.html
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TeaPie.Http.HttpMessagesExtensions.StatusCode*
  commentId: Overload:TeaPie.Http.HttpMessagesExtensions.StatusCode
  href: TeaPie.Http.HttpMessagesExtensions.html#TeaPie_Http_HttpMessagesExtensions_StatusCode_System_Net_Http_HttpResponseMessage_
  name: StatusCode
  nameWithType: HttpMessagesExtensions.StatusCode
  fullName: TeaPie.Http.HttpMessagesExtensions.StatusCode
